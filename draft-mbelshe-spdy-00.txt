


Network Working Group                                          M. Belshe
Internet-Draft                                                     Twist
Expires: February 2, 2013                                        R. Peon
                                                             Google, Inc
                                                             August 2012


                             SPDY Protocol
                     draft-mbelshe-httpbis-spdy-00

Abstract

   This document describes SPDY, a protocol designed for low-latency
   transport of content over the World Wide Web. SPDY introduces two
   layers of protocol.  The lower layer is a general purpose framing
   layer which can be used atop a reliable transport (likely TCP) for
   multiplexed, prioritized, and compressed data communication of many
   concurrent streams.  The upper layer of the protocol provides HTTP-
   like semantics for compatibility with existing HTTP application
   servers.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on February 2, 2013.

Copyright Notice

   Copyright (c) 2012 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect



Belshe & Peon           Expires February 2, 2013                [Page 1]

Internet-Draft                    SPDY                       August 2012


   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   1.  Overview . . . . . . . . . . . . . . . . . . . . . . . . . . .  4
     1.1.  Document Organization  . . . . . . . . . . . . . . . . . .  4
     1.2.  Definitions  . . . . . . . . . . . . . . . . . . . . . . .  5
   2.  SPDY Framing Layer . . . . . . . . . . . . . . . . . . . . . .  6
     2.1.  Session (Connections)  . . . . . . . . . . . . . . . . . .  6
     2.2.  Framing  . . . . . . . . . . . . . . . . . . . . . . . . .  6
       2.2.1.  Notational Conventions for Framing . . . . . . . . . .  6
       2.2.2.  Frame Format . . . . . . . . . . . . . . . . . . . . .  8
     2.3.  Streams  . . . . . . . . . . . . . . . . . . . . . . . . .  8
       2.3.1.  Stream frames  . . . . . . . . . . . . . . . . . . . .  9
       2.3.2.  Stream creation  . . . . . . . . . . . . . . . . . . .  9
       2.3.3.  Stream priority  . . . . . . . . . . . . . . . . . . . 10
       2.3.4.  Stream headers . . . . . . . . . . . . . . . . . . . . 10
       2.3.5.  Stream data exchange . . . . . . . . . . . . . . . . . 10
       2.3.6.  Stream half-close  . . . . . . . . . . . . . . . . . . 10
       2.3.7.  Stream close . . . . . . . . . . . . . . . . . . . . . 11
     2.4.  Error Handling . . . . . . . . . . . . . . . . . . . . . . 11
       2.4.1.  Session Error Handling . . . . . . . . . . . . . . . . 11
       2.4.2.  Stream Error Handling  . . . . . . . . . . . . . . . . 12
     2.5.  Data flow  . . . . . . . . . . . . . . . . . . . . . . . . 12
     2.6.  Frame Types  . . . . . . . . . . . . . . . . . . . . . . . 13
       2.6.1.  DATA . . . . . . . . . . . . . . . . . . . . . . . . . 13
       2.6.2.  SYN_STREAM . . . . . . . . . . . . . . . . . . . . . . 14
       2.6.3.  SYN_REPLY  . . . . . . . . . . . . . . . . . . . . . . 15
       2.6.4.  RST_STREAM . . . . . . . . . . . . . . . . . . . . . . 16
       2.6.5.  PUSH_PROMISE . . . . . . . . . . . . . . . . . . . . . 17
       2.6.6.  SETTINGS . . . . . . . . . . . . . . . . . . . . . . . 18
       2.6.7.  PING . . . . . . . . . . . . . . . . . . . . . . . . . 21
       2.6.8.  GOAWAY . . . . . . . . . . . . . . . . . . . . . . . . 22
       2.6.9.  HEADERS  . . . . . . . . . . . . . . . . . . . . . . . 23
       2.6.10. WINDOW_UPDATE  . . . . . . . . . . . . . . . . . . . . 24
       2.6.11. CREDENTIAL . . . . . . . . . . . . . . . . . . . . . . 26
       2.6.12. Name/Value Header Block  . . . . . . . . . . . . . . . 28
   3.  HTTP Layering over SPDY  . . . . . . . . . . . . . . . . . . . 36
     3.1.  Connection Management  . . . . . . . . . . . . . . . . . . 36
       3.1.1.  Use of GOAWAY  . . . . . . . . . . . . . . . . . . . . 36
     3.2.  HTTP Request/Response  . . . . . . . . . . . . . . . . . . 37
       3.2.1.  Request  . . . . . . . . . . . . . . . . . . . . . . . 37
       3.2.2.  Response . . . . . . . . . . . . . . . . . . . . . . . 38
       3.2.3.  Authentication . . . . . . . . . . . . . . . . . . . . 39



Belshe & Peon           Expires February 2, 2013                [Page 2]

Internet-Draft                    SPDY                       August 2012


     3.3.  Server Push Transactions . . . . . . . . . . . . . . . . . 40
       3.3.1.  Server implementation  . . . . . . . . . . . . . . . . 41
       3.3.2.  Client implementation  . . . . . . . . . . . . . . . . 42
   4.  WebSocket Layering over SPDY . . . . . . . . . . . . . . . . . 44
     4.1.  Connection Management  . . . . . . . . . . . . . . . . . . 44
       4.1.1.  Opening Handshake  . . . . . . . . . . . . . . . . . . 44
       4.1.2.  Closing Handshake  . . . . . . . . . . . . . . . . . . 45
     4.2.  Bi-directional Communication . . . . . . . . . . . . . . . 46
       4.2.1.  Frame mapping  . . . . . . . . . . . . . . . . . . . . 46
   5.  Design Rationale and Notes . . . . . . . . . . . . . . . . . . 48
     5.1.  Separation of Framing Layer and Application Layer  . . . . 48
     5.2.  Error handling - Framing Layer . . . . . . . . . . . . . . 48
     5.3.  One Connection Per Domain  . . . . . . . . . . . . . . . . 48
     5.4.  Fixed vs Variable Length Fields  . . . . . . . . . . . . . 49
     5.5.  Compression Context(s) . . . . . . . . . . . . . . . . . . 49
     5.6.  Unidirectional streams . . . . . . . . . . . . . . . . . . 50
     5.7.  Data Compression . . . . . . . . . . . . . . . . . . . . . 50
     5.8.  Server Push  . . . . . . . . . . . . . . . . . . . . . . . 50
   6.  Security Considerations  . . . . . . . . . . . . . . . . . . . 51
     6.1.  Use of Same-origin constraints . . . . . . . . . . . . . . 51
     6.2.  HTTP Headers and SPDY Headers  . . . . . . . . . . . . . . 51
     6.3.  Cross-Protocol Attacks . . . . . . . . . . . . . . . . . . 51
     6.4.  Server Push Implicit Headers . . . . . . . . . . . . . . . 51
   7.  Privacy Considerations . . . . . . . . . . . . . . . . . . . . 52
     7.1.  Long Lived Connections . . . . . . . . . . . . . . . . . . 52
     7.2.  SETTINGS frame . . . . . . . . . . . . . . . . . . . . . . 52
   8.  Sub-protocol negotiation . . . . . . . . . . . . . . . . . . . 53
     8.1.  Supporting scheme negotiation using SETTINGS frame . . . . 53
   9.  Incompatibilities with SPDY draft #3 . . . . . . . . . . . . . 54
   10. Requirements Notation  . . . . . . . . . . . . . . . . . . . . 56
   11. Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 57
   12. Normative References . . . . . . . . . . . . . . . . . . . . . 58
   Appendix A.  Changes . . . . . . . . . . . . . . . . . . . . . . . 60
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 61

















Belshe & Peon           Expires February 2, 2013                [Page 3]

Internet-Draft                    SPDY                       August 2012


1.  Overview

   One of the bottlenecks of HTTP implementations is that HTTP relies on
   multiple connections for concurrency.  This causes several problems,
   including additional round trips for connection setup, slow-start
   delays, and connection rationing by the client, where it tries to
   avoid opening too many connections to any single server.  HTTP
   pipelining helps some, but only achieves partial multiplexing.  In
   addition, pipelining has proven non-deployable in existing browsers
   due to intermediary interference.

   SPDY adds a framing layer for multiplexing multiple, concurrent
   streams across a single TCP connection (or any reliable transport
   stream).  The framing layer is optimized for HTTP-like request-
   response streams, such that applications which run over HTTP today
   can work over SPDY with little or no change on behalf of the web
   application writer.

   The SPDY session offers four improvements over HTTP:

      Multiplexed requests: There is no limit to the number of requests
      that can be issued concurrently over a single SPDY connection.

      Prioritized requests: Clients can request certain resources to be
      delivered first.  This avoids the problem of congesting the
      network channel with non-critical resources when a high-priority
      request is pending.

      Compressed headers: Clients today send a significant amount of
      redundant data in the form of HTTP headers.  Because a single web
      page may require 50 or 100 subrequests, this data is significant.

      Server pushed streams: Server Push enables content to be pushed
      from servers to clients without a request.

   SPDY attempts to preserve the existing semantics of HTTP.  All
   features such as cookies, ETags, Vary headers, Content-Encoding
   negotiations, etc work as they do with HTTP; SPDY only replaces the
   way the data is written to the network.

1.1.  Document Organization

   The SPDY Specification is split into two parts: a framing layer
   (Section 2), which multiplexes a TCP connection into independent,
   length-prefixed frames, and an HTTP layer (Section 3), which
   specifies the mechanism for overlaying HTTP request/response pairs on
   top of the framing layer.  While some of the framing layer concepts
   are isolated from the HTTP layer, building a generic framing layer



Belshe & Peon           Expires February 2, 2013                [Page 4]

Internet-Draft                    SPDY                       August 2012


   has not been a goal.  The framing layer is tailored to the needs of
   the HTTP protocol and server push.

1.2.  Definitions

      client: The endpoint initiating the SPDY session.

      connection: A transport-level connection between two endpoints.

      endpoint: Either the client or server of a connection.

      frame: A header-prefixed sequence of bytes sent over a SPDY
      session.

      server: The endpoint which did not initiate the SPDY session.

      session: A synonym for a connection.

      session error: An error on the SPDY session.

      stream: A potentially bi-directional flow of bytes across a
      virtual channel within a SPDY session.

      stream error: An error on an individual SPDY stream.



























Belshe & Peon           Expires February 2, 2013                [Page 5]

Internet-Draft                    SPDY                       August 2012


2.  SPDY Framing Layer

2.1.  Session (Connections)

   The SPDY framing layer (or "session") runs atop a reliable transport
   layer such as TCP [RFC0793].  The client is the TCP connection
   initiator.  SPDY connections are persistent connections.

   For best performance, it is expected that non-battery operated
   clients will leave open connections until the user navigates away
   from all web pages referencing the connection, or until the server
   closes the connection.  Servers are encouraged to leave connections
   open for as long as possible, but can terminate idle connections if
   necessary.  When either endpoint closes the transport-level
   connection, it MUST first send a GOAWAY (Section 2.6.8) frame so that
   the endpoints can reliably determine if requests finished before the
   close.  It is expected that battery-operated clients may have more
   involved heuristics as to when a connection should be closed.

2.2.  Framing

   Once the connection is established, clients and servers exchange
   framed messages.

   All frames carry a common set of headers: length, type, and flags.
   Flag definitions vary between frame types.  The simple header format
   is designed to make reading and writing of frames easy.

   All integer values, including length, and type, are in network byte
   order.  SPDY does not enforce alignment of types in dynamically sized
   frames.

2.2.1.  Notational Conventions for Framing

   In SPDY, since everything is defined to be in network byte-order, the
   most significant bit of any field is the "leftmost" in any diagram.

      "+" denotes the boundary of a byte (synonomous with octet in this
      document)

      "-" denotes a bit

      "=" denotes an unknown number of bits, typically bounded by one of
      the fields in the frame definition

      "|" denotes field separation, which may or may not be on a byte
      boundary.  This does not count as a bit




Belshe & Peon           Expires February 2, 2013                [Page 6]

Internet-Draft                    SPDY                       August 2012


      "->" at the end of a line indicates that the structure is not yet
      fully described

      "(N)" indicates that the field is N bits long

      "[Foo]" advises that the field is the Foo field for that frame

      "X" represents a reserved bit.  It MUST be zeroed

      A number preceeded by "0x" is a hexidecimal number

      A number which is not preceeded by "0x" is to be interpreted as
      binary

      The numbers above the boxes indicate the byte-offset from the
      start of that frame or section, as appropriate

   As an example:

                     0         1         2       3
                     +--|------+--|------+--------+--------+
                     |10|[PRI]0xEE|XXXXXX| Len(16)         |
                     +--|------+--|------+--------+--------+

   This describes a frame which starts with 1 as the MSB, a 0 in the
   second most significant bit, followed by 0b11101110 (or 0xEE) as the
   "PRI" field, followed by 6 reserved bits, which will have all be
   zeroed, followed by a Len field which is 16 bits long.  In other
   words, first two bytes would be: 0b10111011 0b10000000, followed by
   the Len field.

   Another example.  In this case, a single byte is represented with the
   most significant bit a 0, the second most significant bit a 1, the
   next bit the 'K' field, the next bit the 'L' field, and the next 4
   bits are reserved and must be zeros.  The frame description
   continues, describing that an indeterminate (presumably defined
   elsewhere) amount of data follows and ends on a byte boundary.

                     0
                     +--|-|-|----+
                     |01|K|L|XXXX|  ->
                     +--|-|-|----+

                     1..N
                     +========+
                     |  data  |
                     +========+




Belshe & Peon           Expires February 2, 2013                [Page 7]

Internet-Draft                    SPDY                       August 2012


2.2.2.  Frame Format

  0        1        2        3        4         5        6        7
  +--------+--------+--------+--------+--------+--------+--------+--------+
  | Length(16)      |Type(8) |Flags(8)| Num-of-Entries-or-Stream-ID-or-ID | ->
  +--------+--------+--------+--------+--------+--------+--------+--------+

  8..N
  +========+
  |  Data  |
  +========+

   Length: An unsigned 16-bit value representing the total number of
   bytes of the frame.

   Type: The frame type.  See Frame Types (Section 2.6) for the complete
   list of frames.

   Flags: Flags related to this frame.  Flag definitions are dependent
   upon the frame type.

   Data: data associated with this control frame.  The format of this
   data is controlled by the frame type.

   Frame processing requirements:

      Note that full length frames (64kb) can be large for
      implementations running on resource-limited hardware.  In such
      cases, implementations MAY limit the maximum length frame
      supported.  However, all implementations MUST be able to receive
      frames of at least 8192 octets in length.

2.3.  Streams

   Streams are independent sequences of bi-directional data divided into
   frames with several properties:

      Streams may be created by either the client or server.

      Streams optionally carry a set of name/value header pairs.

      Streams can concurrently send data interleaved with other streams.

      Streams may be cancelled.







Belshe & Peon           Expires February 2, 2013                [Page 8]

Internet-Draft                    SPDY                       August 2012


2.3.1.  Stream frames

   SPDY defines 3 control frames to manage the lifecycle of a stream:

      SYN_STREAM - Open a new stream

      SYN_REPLY - Remote acknowledgement of a new, open stream

      RST_STREAM - Close a stream

2.3.2.  Stream creation

   A stream is created by sending a control frame with the type set to
   SYN_STREAM (Section 2.6.2).  If the server is initiating the stream,
   the Stream-ID must be even.  If the client is initiating the stream,
   the Stream-ID must be odd. 0 is not a valid Stream-ID.  Stream-IDs
   from each side of the connection must increase monotonically as new
   streams are created.  E.g.  Stream 2 may be created after stream 3,
   but stream 7 must not be created after stream 9.  Stream IDs do not
   wrap: when a client or server cannot create a new stream id without
   exceeding a 31 bit value, it MUST NOT create a new stream.

   The stream-id MUST increase with each new stream.  If an endpoint
   receives a SYN_STREAM with a stream id which is less than any
   previously received SYN_STREAM, it MUST issue a session error
   (Section 2.4.1) with the status PROTOCOL_ERROR.

   It is a protocol error to send two SYN_STREAMs with the same
   stream-id.  If a recipient receives a second SYN_STREAM for the same
   stream, it MUST issue a stream error (Section 2.4.2) with the status
   code PROTOCOL_ERROR.

   Upon receipt of a SYN_STREAM, the recipient can reject the stream by
   sending a stream error (Section 2.4.2) with the error code
   REFUSED_STREAM.  Note, however, that the creating endpoint may have
   already sent additional frames for that stream which cannot be
   immediately stopped.

   Once the stream is created, the creator may immediately send HEADERS
   or DATA frames for that stream, without needing to wait for the
   recipient to acknowledge.

2.3.2.1.  Unidirectional streams

   When an endpoint creates a stream that includes an Associated-To-
   Stream-ID, it creates a unidirectional stream which the creating
   endpoint can use to send frames, but the receiving endpoint cannot.
   The receiving endpoint is implicitly already in the half-closed



Belshe & Peon           Expires February 2, 2013                [Page 9]

Internet-Draft                    SPDY                       August 2012


   (Section 2.3.6) state.

2.3.2.2.  Bidirectional streams

   SYN_STREAM frames which do not include an Associated-To-Stream-ID are
   bidirectional streams.  Both endpoints can send data on a bi-
   directional stream.

2.3.3.  Stream priority

   The creator of a stream assigns a priority for that stream.  Priority
   is represented as an integer from 0 to 7. 0 represents the highest
   priority and 7 represents the lowest priority.

   The sender and recipient SHOULD use best-effort to process streams in
   the order of highest priority to lowest priority.

2.3.4.  Stream headers

   Streams carry optional sets of name/value pair headers which carry
   metadata about the stream.  After the stream has been created, and as
   long as the sender is not closed (Section 2.3.7) or half-closed
   (Section 2.3.6), each side may send HEADERS frame(s) containing the
   header data.  Header data can be sent in multiple HEADERS frames, and
   HEADERS frames may be interleaved with data frames.

2.3.5.  Stream data exchange

   Once a stream is created, it can be used to send arbitrary amounts of
   data.  Generally this means that a series of data frames will be sent
   on the stream until a frame containing the FLAG_FIN flag is set.  The
   FLAG_FIN can be set on a SYN_STREAM (Section 2.6.2), SYN_REPLY
   (Section 2.6.3), HEADERS (Section 2.6.9) or a DATA (Section 2.6.1)
   frame.  Once the FLAG_FIN has been sent, the stream is considered to
   be half-closed.

2.3.6.  Stream half-close

   When one side of the stream sends a frame with the FLAG_FIN flag set,
   the stream is half-closed from that endpoint.  The sender of the
   FLAG_FIN MUST NOT send further frames on that stream.  When both
   sides have half-closed, the stream is closed.

   If an endpoint receives a data frame after the stream is half-closed
   from the sender (e.g. the endpoint has already received a prior frame
   for the stream with the FIN flag set), it MUST send a RST_STREAM to
   the sender with the status STREAM_ALREADY_CLOSED.




Belshe & Peon           Expires February 2, 2013               [Page 10]

Internet-Draft                    SPDY                       August 2012


2.3.7.  Stream close

   There are 3 ways that streams can be terminated:

      Normal termination: Normal stream termination occurs when both
      sender and recipient have half-closed the stream by sending a
      FLAG_FIN.

      Abrupt termination: Either the client or server can send a
      RST_STREAM control frame at any time.  A RST_STREAM contains an
      error code to indicate the reason for failure.  When a RST_STREAM
      is sent from the stream originator, it indicates a failure to
      complete the stream and that no further data will be sent on the
      stream.  When a RST_STREAM is sent from the stream recipient, the
      sender, upon receipt, should stop sending any data on the stream.
      The stream recipient should be aware that there is a race between
      data already in transit from the sender and the time the
      RST_STREAM is received.  See Stream Error Handling (Section 2.4.2)

      TCP connection teardown: If the TCP connection is torn down while
      un-closed streams exist, then the endpoint must assume that the
      stream was abnormally interrupted and may be incomplete.

   If an endpoint receives a data frame after the stream is closed, it
   must send a RST_STREAM to the sender with the status PROTOCOL_ERROR.

2.4.  Error Handling

   The SPDY framing layer has only two types of errors, and they are
   always handled consistently.  Any reference in this specification to
   "issue a session error" refers to Section 2.4.1.  Any reference to
   "issue a stream error" refers to Section 2.4.2.

2.4.1.  Session Error Handling

   A session error is any error which prevents further processing of the
   framing layer or which corrupts the session compression state.  When
   a session error occurs, the endpoint encountering the error MAY send
   a SETTINGS (Section 2.6.6) frame.  Whether or not a SETTINGS
   (Section 2.6.6) frame is sent, the endpoint encountering the error
   MUST send a GOAWAY (Section 2.6.8) frame with the stream id of most
   recently received stream from the remote endpoint, and the error code
   for why the session is terminating.  After sending the GOAWAY frame,
   the endpoint MUST close the TCP connection.

   Note that the session compression state is dependent upon both
   endpoints always processing all compressed data.  If an endpoint
   partially processes a frame containing compressed data without



Belshe & Peon           Expires February 2, 2013               [Page 11]

Internet-Draft                    SPDY                       August 2012


   updating compression state properly, future control frames which use
   compression will be always be errored.  Implementations SHOULD always
   try to process compressed data so that errors which could be handled
   as stream errors do not become session errors.

   Note that because this GOAWAY is sent during a session error case, it
   is possible that the GOAWAY will not be reliably received by the
   receiving endpoint.  It is a best-effort attempt to communicate with
   the remote about why the session is going down.

2.4.2.  Stream Error Handling

   A stream error is an error related to a specific stream-id which does
   not affect processing of other streams at the framing layer.  Upon a
   stream error, the endpoint MUST send a RST_STREAM (Section 2.6.4)
   frame which contains the stream id of the stream where the error
   occurred and the error status which caused the error.  After sending
   the RST_STREAM, the stream is closed to the sending endpoint.  After
   sending the RST_STREAM, if the sender receives any frames other than
   a RST_STREAM for that stream id, it will result in sending additional
   RST_STREAM frames.  An endpoint MUST NOT send a RST_STREAM in
   response to an RST_STREAM, as doing so would lead to RST_STREAM
   loops.  Sending a RST_STREAM does not cause the SPDY session to be
   closed.

   If an endpoint has multiple RST_STREAM frames to send in succession
   for the same stream-id and the same error code, it MAY coalesce them
   into a single RST_STREAM frame.  (This can happen if a stream is
   closed, but the remote sends multiple data frames.  There is no
   reason to send a RST_STREAM for each frame in succession).

2.5.  Data flow

   Because TCP provides a single stream of data on which SPDY
   multiplexes multiple logical streams, clients and servers must
   intelligently interleave data messages for concurrent sessions.















Belshe & Peon           Expires February 2, 2013               [Page 12]

Internet-Draft                    SPDY                       August 2012


2.6.  Frame Types

   +------------------+--------------------------------+
   | Type-field value |           Frame type           |
   +------------------+--------------------------------+
   |        0x0       |      DATA (Section 2.6.1)      |
   |                  |                                |
   |        0x1       |   SYN_STREAM (Section 2.6.2)   |
   |                  |                                |
   |        0x2       |    SYN_REPLY (Section 2.6.3)   |
   |                  |                                |
   |        0x3       |   RST_STREAM (Section 2.6.4)   |
   |                  |                                |
   |        0x5       |  PUSH_PROMISE (Section 2.6.5)  |
   |                  |                                |
   |        0x4       |    SETTINGS (Section 2.6.6)    |
   |                  |                                |
   |        0x6       |      PING (Section 2.6.7)      |
   |                  |                                |
   |        0x7       |     GOAWAY (Section 2.6.8)     |
   |                  |                                |
   |        0x8       |     HEADERS (Section 2.6.9)    |
   |                  |                                |
   |        0x9       | WINDOW_UPDATE (Section 2.6.10) |
   |                  |                                |
   |        0xa       |   CREDENTIAL (Section 2.6.11)  |
   +------------------+--------------------------------+

   Shared components of several control frames: Name/Value Header Block
   (Section 2.6.12)

2.6.1.  DATA

  0        1        2        3        4         5        6        7
  +--------+--------+--------+--------+-|-------+--------+--------+--------+
  | Length(16)      |    0x0 |Flags(8)|X| Stream-ID(31)                    | ->
  +--------+--------+--------+--------+-|-------+--------+--------+--------+

  8..N
  +========+
  |  Data  |
  +========+

   Length: An unsigned 16-bit value representing the number of bytes
   which follow the frame header.  The total size of a data frame is 8
   bytes + length.  It is valid to have a zero-length data frame.

   Flags: Flags related to this frame.  Valid flags are:



Belshe & Peon           Expires February 2, 2013               [Page 13]

Internet-Draft                    SPDY                       August 2012


      0x01 = FLAG_FIN - signifies that this frame represents the last
      frame to be transmitted on this stream.  See Stream Close
      (Section 2.3.7) below.

      0x02 = MSG_DONE - signifies that this frame represents the last
      frame of a message.  This is relevant for layering of message-
      based protocols on top of SPDY.

   Stream-ID: A 31-bit value identifying the stream.

   Data: The variable-length data payload; the length was defined in the
   length field.

   Data frame processing requirements:

      If an endpoint receives a data frame for a stream-id which is not
      open and the endpoint has not sent a GOAWAY (Section 2.6.8) frame,
      it MUST issue a stream error (Section 2.4.2) with the error code
      INVALID_STREAM for the stream-id.

      If the endpoint which created the stream receives a data frame
      before receiving a SYN_REPLY on that stream, it is a protocol
      error, and the recipient MUST issue a stream error (Section 2.4.2)
      with the status code PROTOCOL_ERROR for the stream-id.

      Implementors note: If an endpoint receives multiple data frames
      for invalid stream-ids, it MAY close the session.

2.6.2.  SYN_STREAM

   The SYN_STREAM control frame allows the sender to asynchronously
   create a stream between the endpoints.  See Stream Creation
   (Section 2.3.2)

  0        1        2        3        4         5        6        7
  +--------+--------+--------+--------+-|-------+--------+--------+--------+
  | Length(16)      |    0x1 |Flags(8)|X| Stream-ID(31)                    | ->
  +--------+--------+--------+--------+-|-------+--------+--------+--------+

  8        9        10       11       12,13,14..N
  +-|-------+--------+--------+--------+=========================+
  |X|Priority(31)                      | Name/Value Header Block |
  +-|-------+--------+--------+--------+=========================+

   Length: An unsigned 16-bit value representing the number of bytes
   which follow the frame header.  For SYN_STREAM frames, this is 4
   bytes plus the length of the Name/Value Header Block.




Belshe & Peon           Expires February 2, 2013               [Page 14]

Internet-Draft                    SPDY                       August 2012


   Flags: Flags related to this frame.  Valid flags are:

      0x01 = FLAG_FIN - marks this frame as the last frame to be
      transmitted on this stream and puts the sender in the half-closed
      (Section 2.3.6) state.

   Stream-ID: The 31-bit identifier for this stream.  This stream-id
   will be used in frames which are part of this stream.

   Priority: A 31-bit priority (Section 2.3.3) field.

   Name/Value Header Block: A set of name/value pairs carried as part of
   the SYN_STREAM. see Name/Value Header Block (Section 2.6.12).

   If an endpoint receives a SYN_STREAM which is larger than the
   implementation supports, it MAY send a RST_STREAM with error code
   FRAME_TOO_LARGE.  All implementations MUST support the minimum size
   limits defined in the Frame Format section (Section 2.2.2).

2.6.3.  SYN_REPLY

   SYN_REPLY indicates the acceptance of a stream creation by the
   recipient of a SYN_STREAM frame.

  0        1        2        3        4         5        6        7
  +--------+--------+--------+--------+-|-------+--------+--------+--------+
  | Length(16)      |    0x2 |Flags(8)|X| Stream-ID(31)                    | ->
  +--------+--------+--------+--------+-|-------+--------+--------+--------+

  8,9,10..N
  +=========================+
  | Name/Value Header Block |
  +=========================+

   Length: An unsigned 16-bit value representing the number of bytes
   which follow the frame header.  For SYN_REPLY frames, this is the
   length of the Name/Value Header Block.

   Flags: Flags related to this frame.  Valid flags are:

      0x01 = FLAG_FIN - marks this frame as the last frame to be
      transmitted on this stream and puts the sender in the half-closed
      (Section 2.3.6) state.

   Stream-ID: The 31-bit identifier for this stream.

   If an endpoint receives multiple SYN_REPLY frames for the same active
   stream ID, it MUST issue a stream error (Section 2.4.2) with the



Belshe & Peon           Expires February 2, 2013               [Page 15]

Internet-Draft                    SPDY                       August 2012


   error code STREAM_IN_USE.

   Name/Value Header Block: A set of name/value pairs carried as part of
   the SYN_REPLY. see Name/Value Header Block (Section 2.6.12).

   If an endpoint receives a SYN_REPLY which is larger than the
   implementation supports, it MAY send a RST_STREAM with error code
   FRAME_TOO_LARGE.  All implementations MUST support the minimum size
   limits defined in the Frame Format section (Section 2.2.2).

2.6.4.  RST_STREAM

   The RST_STREAM frame allows for abnormal termination of a stream.
   When sent by the creator of a stream, it indicates the creator wishes
   to cancel the stream.  When sent by the recipient of a stream, it
   indicates an error or that the recipient did not want to accept the
   stream, so the stream should be closed.

  0        1        2        3        4         5        6        7
  +--------+--------+--------+--------+-|-------+--------+--------+--------+
  | Length(16)      |    0x3 |Flags(8)|X| Stream-ID(31)                    | ->
  +--------+--------+--------+--------+-|-------+--------+--------+--------+

  8        9        10       11
  +--------+--------+--------+--------+
  | Status-Code(32)                   |
  +--------+--------+--------+--------+

   Length: An unsigned 16-bit value representing the number of bytes
   which follow the frame header.  For RST_STREAM frames, this value is
   always 4.

   Flags: Flags related to this frame.  RST_STREAM does not define any
   flags.  This value must be 0.

   Stream-ID: The 31-bit identifier for this stream.

   Status code: (32 bits) An indicator for why the stream is being
   terminated.The following status codes are defined:

      1 - PROTOCOL_ERROR.  This is a generic error, and should only be
      used if a more specific error is not available.

      2 - INVALID_STREAM.  This is returned when a frame is received for
      a stream which is not active.

      3 - REFUSED_STREAM.  Indicates that the stream was refused before
      any processing has been done on the stream.



Belshe & Peon           Expires February 2, 2013               [Page 16]

Internet-Draft                    SPDY                       August 2012


      4 - UNSUPPORTED_VERSION.  Indicates that the recipient of a stream
      does not support the SPDY version requested.

      5 - CANCEL.  Used by the creator of a stream to indicate that the
      stream is no longer needed.

      6 - INTERNAL_ERROR.  This is a generic error which can be used
      when the implementation has internally failed, not due to anything
      in the protocol.

      7 - FLOW_CONTROL_ERROR.  The endpoint detected that its peer
      violated the flow control protocol.

      8 - STREAM_IN_USE.  The endpoint received a SYN_REPLY for a stream
      already open.

      9 - STREAM_ALREADY_CLOSED.  The endpoint received a data or
      SYN_REPLY frame for a stream which is half closed.

      10 - INVALID_CREDENTIALS.  The server received a request for a
      resource whose origin does not have valid credentials in the
      client certificate vector.

      11 - FRAME_TOO_LARGE.  The endpoint received a frame which this
      implementation could not support.  If FRAME_TOO_LARGE is sent for
      a SYN_STREAM, HEADERS, or SYN_REPLY frame without fully processing
      the compressed portion of those frames, then the compression state
      will be out-of-sync with the other endpoint.  In this case,
      senders of FRAME_TOO_LARGE MUST close the session.

      Note: 0 is not a valid status code for a RST_STREAM.

   After receiving a RST_STREAM on a stream, the recipient must not send
   additional frames for that stream, and the stream moves into the
   closed state.

2.6.5.  PUSH_PROMISE

   The PUSH_PROMISE control frame allows the sender to signal a promise
   to create a stream and serve the referenced resource.  Minimal data
   allowing the receiver to understand which resource(s) are to be
   pushed are to be included.









Belshe & Peon           Expires February 2, 2013               [Page 17]

Internet-Draft                    SPDY                       August 2012


  0        1        2        3        4         5        6        7
  +--------+--------+--------+--------+-|-------+--------+--------+--------+
  | Length(16)      |    0x5 |Flags(8)|X| Associated-To-Stream-ID(31)      | ->
  +--------+--------+--------+--------+-|-------+--------+--------+--------+

  8        9        10       11       12,13,14..N
  +-|-------+--------+--------+--------+=========================+
  |X| Promised-Stream-ID(31)           | Name/Value Header Block |
  +-|-------+--------+--------+--------+=========================+

   Length: An unsigned 16-bit value representing the number of bytes
   which follow the frame header.  For PUSH_PROMISE frames, this is 4
   bytes plus the length of the Name/Value Header Block.

   Flags: Flags related to this frame.  Valid flags are:

      0x01 = FLAG_FIN - marks this frame as the last frame to be
      transmitted on this stream and puts the sender in the half-closed
      (Section 2.3.6) state.

   Associated-To-Stream-ID: The 31-bit identifier for a stream which
   this stream is associated to.  If this stream is independent of all
   other streams, it should be 0.

   Promised-Stream-ID: The 31-bit identifier indicating the stream-id on
   which the resource will be pushed.  If multiple headers are indicated
   within the Name/Value Header Block, each subsequent resource as
   indicated in the Header Block will increment the Promised-Stream-Id
   by two.  The Promised-Stream-ID is subject to the same rules as any
   other stream-id-- when defined and transmitted, the
   Promised-Stream-ID MUST be part of a monotonically increasing
   sequence of stream-ids.  There is no requirement that the streams
   referred to by the this frame are created in the order referenced.

   Name/Value Header Block: A set of name/value pairs carried as part of
   the PUSH_PROMISE. see Name/Value Header Block (Section 2.6.12).

   If an endpoint receives a PUSH_PROMISE which is larger than the
   implementation supports, it MAY send a RST_STREAM with error code
   FRAME_TOO_LARGE.  All implementations MUST support the minimum size
   limits defined in the Frame Format section (Section 2.2.2).

2.6.6.  SETTINGS

   A SETTINGS frame contains a set of id/value pairs for communicating
   configuration data about how the two endpoints may communicate.
   SETTINGS frames can be sent at any time by either endpoint, are
   optionally sent, and are fully asynchronous.  When the server is the



Belshe & Peon           Expires February 2, 2013               [Page 18]

Internet-Draft                    SPDY                       August 2012


   sender, the sender can request that configuration data be persisted
   by the client across SPDY sessions and returned to the server in
   future communications.

   Persistence of SETTINGS ID/Value pairs is done on a per origin/IP
   pair (the "origin" is the set of scheme, host, and port from the URI.
   See [RFC6454]).  That is, when a client connects to a server, and the
   server persists settings within the client, the client SHOULD return
   the persisted settings on future connections to the same origin AND
   IP address and TCP port.  Clients MUST NOT request servers to use the
   persistence features of the SETTINGS frames, and servers MUST ignore
   persistence related flags sent by a client.

  0        1        2        3        4         5        6        7
  +--------+--------+--------+--------+-|-------+--------+--------+--------+
  | Length(16)      |    0x4 |Flags(8)|X|Number-of-Entries(31)             | ->
  +--------+--------+--------+--------+-|-------+--------+--------+--------+

  8..N
  +================+
  | ID/Value-Pairs |
  +================+

   Length: An unsigned 16-bit value representing the number of bytes
   which follow the frame header.  For SETTINGS frames, this is the
   length of the ID/Value-Pairs Block.

   Type: The message type for a SETTINGS message is 4.

   Flags: FLAG_SETTINGS_CLEAR_SETTINGS (0x1): When set, the client
   should clear any previously persisted SETTINGS ID/Value pairs.  If
   this frame contains ID/Value pairs with the
   FLAG_SETTINGS_PERSIST_VALUE set, then the client will first clear its
   existing, persisted settings, and then persist the values with the
   flag set which are contained within this frame.  Because persistence
   is only implemented on the client, this flag can only be used when
   the sender is the server.

   Number of entries: A 32-bit value representing the number of ID/value
   pairs in this message.

   Each ID/value pair is as follows:

                  0        1        2        3        4        5        6        7
                  +--------+--------+--------+--------+--------+--------+--------+--------+
                  |Flags(8)| ID(24)                   | Value(32)                         |
                  +--------+--------+--------+--------+--------+--------+--------+--------+




Belshe & Peon           Expires February 2, 2013               [Page 19]

Internet-Draft                    SPDY                       August 2012


   Flags: An 8 bit value.  Defined Flags:

      FLAG_SETTINGS_PERSIST_VALUE (0x1): When set, the sender of this
      SETTINGS frame is requesting that the recipient persist the ID/
      Value and return it in future SETTINGS frames sent from the sender
      to this recipient.  Because persistence is only implemented on the
      client, this flag is only sent by the server.

      FLAG_SETTINGS_PERSISTED (0x2): When set, the sender is notifying
      the recipient that this ID/Value pair was previously sent to the
      sender by the recipient with the FLAG_SETTINGS_PERSIST_VALUE, and
      the sender is returning it.  Because persistence is only
      implemented on the client, this flag is only sent by the client.

   ID: 24-bits in network byte order.  Defined IDs:

      1 - SETTINGS_UPLOAD_BANDWIDTH allows the sender to send its
      expected upload bandwidth on this channel.  This number is an
      estimate.  The value should be the integral number of kilobytes
      per second that the sender predicts as an expected maximum upload
      channel capacity.

      2 - SETTINGS_DOWNLOAD_BANDWIDTH allows the sender to send its
      expected download bandwidth on this channel.  This number is an
      estimate.  The value should be the integral number of kilobytes
      per second that the sender predicts as an expected maximum
      download channel capacity.

      3 - SETTINGS_ROUND_TRIP_TIME allows the sender to send its
      expected round-trip-time on this channel.  The round trip time is
      defined as the minimum amount of time to send a control frame from
      this client to the remote and receive a response.  The value is
      represented in milliseconds.

      4 - SETTINGS_MAX_CONCURRENT_STREAMS allows the sender to inform
      the remote endpoint the maximum number of concurrent streams which
      it will allow.  By default there is no limit.  For implementors it
      is recommended that this value be no smaller than 100.

      5 - SETTINGS_CURRENT_CWND allows the sender to inform the remote
      endpoint of the current TCP CWND value.

      6 - SETTINGS_DOWNLOAD_RETRANS_RATE allows the sender to inform the
      remote endpoint the retransmission rate (bytes retransmitted /
      total bytes transmitted).

      7 - SETTINGS_INITIAL_WINDOW_SIZE allows the sender to inform the
      remote endpoint the initial window size (in bytes) for new



Belshe & Peon           Expires February 2, 2013               [Page 20]

Internet-Draft                    SPDY                       August 2012


      streams.

      8 - SETTINGS_CLIENT_CERTIFICATE_VECTOR_SIZE allows the server to
      inform the client if the new size of the client certificate
      vector.

      9 - SETTINGS_SUPPORTING_SCHEMES allows the sender to inform the
      remote endpoint supporting overlayering protocol schemes.  The
      corresponding value must be a 32-bit value, and which contains
      flags as follows:

         bit 0: http

         bit 1: https

         bit 2: ws

         bit 3: wss

   Value: A 32-bit value.

   The message is intentionally extensible for future information which
   may improve client-server communications.  The sender does not need
   to send every type of ID/value.  It must only send those for which it
   has accurate values to convey.  When multiple ID/value pairs are
   sent, they should be sent in order of lowest id to highest id.  A
   single SETTINGS frame MUST not contain multiple values for the same
   ID.  If the recipient of a SETTINGS frame discovers multiple values
   for the same ID, it MUST ignore all values except the first one.

   A server may send multiple SETTINGS frames containing different ID/
   Value pairs.  When the same ID/Value is sent twice, the most recent
   value overrides any previously sent values.  If the server sends IDs
   1, 2, and 3 with the FLAG_SETTINGS_PERSIST_VALUE in a first SETTINGS
   frame, and then sends IDs 4 and 5 with the
   FLAG_SETTINGS_PERSIST_VALUE, when the client returns the persisted
   state on its next SETTINGS frame, it SHOULD send all 5 settings (1,
   2, 3, 4, and 5 in this example) to the server.

2.6.7.  PING

   The PING control frame is a mechanism for measuring a minimal round-
   trip time from the sender.  It can be sent from the client or the
   server.  Recipients of a PING frame should send an identical frame to
   the sender as soon as possible (if there is other pending data
   waiting to be sent, PING should take highest priority).  Each ping
   sent by a sender should use a unique ID.




Belshe & Peon           Expires February 2, 2013               [Page 21]

Internet-Draft                    SPDY                       August 2012


  0        1        2        3        4         5        6        7
  +--------+--------+--------+--------+-|-------+--------+--------+--------+
  | Length(16)      |    0x6 |XXXXXXXX|X| ID(31)                           |
  +--------+--------+--------+--------+-|-------+--------+--------+--------+

   Length: An unsigned 16-bit value representing the number of bytes
   which follow the frame header.  For PING frames, this value is always
   0.

   ID: A unique ID for this ping, represented as an unsigned 32 bit
   value.  When the client initiates a ping, it must use an odd numbered
   ID.  When the server initiates a ping, it must use an even numbered
   ping.  Use of odd/even IDs is required in order to avoid accidental
   looping on PINGs (where each side initiates an identical PING at the
   same time).

   Note: If a sender uses all possible PING ids (e.g. has sent all 2^31
   possible IDs), it can wrap and start re-using IDs.

   If a server receives an even numbered PING which it did not initiate,
   it must ignore the PING.  If a client receives an odd numbered PING
   which it did not initiate, it must ignore the PING.

2.6.8.  GOAWAY

   The GOAWAY control frame is a mechanism to tell the remote side of
   the connection to stop creating streams on this session.  It can be
   sent from the client or the server.  Once sent, the sender will not
   respond to any new SYN_STREAMs on this session.  Recipients of a
   GOAWAY frame must not send additional streams on this session,
   although a new session can be established for new streams.  The
   purpose of this message is to allow an endpoint to gracefully stop
   accepting new streams (perhaps for a reboot or maintenance), while
   still finishing processing of previously established streams.

   There is an inherent race condition between an endpoint sending
   SYN_STREAMs and the remote sending a GOAWAY message.  To deal with
   this case, the GOAWAY contains a last-stream-id indicating the
   stream-id of the last stream which was created on the sending
   endpoint in this session.  If the receiver of the GOAWAY sent new
   SYN_STREAMs for sessions after this last-stream-id, they were not
   processed by the server and the receiver may treat the stream as
   though it had never been created at all (hence the receiver may want
   to re-create the stream later on a new session).

   Endpoints should always send a GOAWAY message before closing a
   connection so that the remote can know whether a stream has been
   partially processed or not.  (For example, if an HTTP client sends a



Belshe & Peon           Expires February 2, 2013               [Page 22]

Internet-Draft                    SPDY                       August 2012


   POST at the same time that a server closes a connection, the client
   cannot know if the server started to process that POST request if the
   server does not send a GOAWAY frame to indicate where it stopped
   working).

   After sending a GOAWAY message, the sender must ignore all SYN_STREAM
   frames for new streams.

  0        1        2        3        4         5        6        7
  +--------+--------+--------+--------+-|-------+--------+--------+--------+
  | Length(16)      |    0x7 |Flags(8)|X| Last-Good-Stream-ID(31)          | ->
  +--------+--------+--------+--------+-|-------+--------+--------+--------+

  8        9        10       11
  +--------+--------+--------+--------+
  |          Status-Code(32)          |
  +--------+--------+--------+--------+

   Length: An unsigned 16-bit value representing the number of bytes
   which follow the frame header.  For PING frames, this value is always
   4.

   Last-good-stream-Id: The last stream id which was replied to (with
   either a SYN_REPLY or RST_STREAM) by the sender of the GOAWAY
   message.  If no streams were replied to, this value MUST be 0.

   Status: The reason for closing the session.

      0 - OK.  This is a normal session teardown.

      1 - PROTOCOL_ERROR.  This is a generic error, and should only be
      used if a more specific error is not available.

      2 - INTERNAL_ERROR.  This is a generic error which can be used
      when the implementation has internally failed, not due to anything
      in the protocol.

2.6.9.  HEADERS

   The HEADERS frame augments a group of streams or an individual stream
   with additional metadata by providing an opportunity to send a new
   Name/Value Header Block (Section 2.6.12) associated with the stream

   Please see Name/Value Header Block (Section 2.6.12) for further
   details about how it is to be interpreted.

   Here is the format of a headers frame and headers block:




Belshe & Peon           Expires February 2, 2013               [Page 23]

Internet-Draft                    SPDY                       August 2012


  0        1        2        3         4        5        6        7
  +--------+--------+--------+--------+-|-------+--------+--------+--------+
  | Length(16)      |    0x8 |Flags(8)|X| Stream-ID(31)                    | ->
  +--------+--------+--------+--------+-|-------+--------+--------+--------+

  8,9,10..N
  +=========================+
  | Name/Value Header Block |
  +=========================+

   Length: An unsigned 16-bit value representing the number of bytes
   which follow the frame header.  For HEADERS frames, this is the
   length of the Name/Value Header Block.

   Flags: Flags related to this frame.  Valid flags are:

      0x01 = FLAG_FIN - marks this frame as the last frame to be
      transmitted on this stream and puts the sender in the half-closed
      (Section 2.3.6) state.

      0x02 = FLAG_HEADER_END - marks this frame as the end of the
      current header.  Multiple HEADERS frames may be involved in
      constructing a single header, if it is sufficiently large.

   Length: An unsigned 24 bit value representing the number of bytes
   after the length field.  The minimum length of the length field is 7
   (when the number of name value pairs is 0).

   Stream-ID: The stream this HEADERS block is associated with.

   Name/Value Header Block: A set of name/value pairs carried as part of
   the SYN_STREAM. see Name/Value Header Block (Section 2.6.12).

2.6.10.  WINDOW_UPDATE

   The WINDOW_UPDATE control frame is used to implement per stream and
   per session flow control in SPDY.  Flow control in SPDY is per hop,
   that is, only between the two endpoints of a SPDY connection.  If
   there are one or more intermediaries between the client and the
   origin server, flow control signals are not explicitly forwarded by
   the intermediaries.  (However, throttling of data transfer by any
   recipient may have the effect of indirectly propagating flow control
   information upstream back to the original sender.)  Flow control only
   applies to the data portion of data frames.

   Flow control in SPDY is implemented by a data transfer window for
   each stream and one for the entire session.  The data transfer window
   is a simple uint32 that indicates how many bytes of data the sender



Belshe & Peon           Expires February 2, 2013               [Page 24]

Internet-Draft                    SPDY                       August 2012


   can transmit.  When the session starts, the sender initializes the
   session window to the initial session window size.  After a stream is
   created, but before any data frames have been transmitted, the sender
   initializes the stream window to the initial stream window size.  The
   window size is a measure of the buffering capability of the
   recipient.  The sender MUST NOT send a data frame with a data length
   greater than the session window size or the stream window size.
   After sending each data frame, the sender decrements both the per
   stream window size and the session window size by the amount of data
   transmitted.  When a stream window size becomes less than or equal to
   0, the sender MUST NOT send data frames for that stream, except for a
   zero length data frame with the FIN flag set.  Likewise, when the
   session window size becomes less than or equal to 0, the sender the
   sender MUST NOT send data frames for that stream, except for a zero
   length data frame with the FIN flag set.  The recipient can send a
   WINDOW_UPDATE frame back to notify the sender that it has consumed
   some data and freed up buffer space to receive more data for the
   stream or session.

  0        1        2        3        4         5        6        7
  +--------+--------+--------+--------+-|-------+--------+--------+--------+
  | Length(16)      |    0x9 |Flags(8)|X| Stream-ID(31)                    | ->
  +--------+--------+--------+--------+-|-------+--------+--------+--------+

  8        9        10       11
  +--------+--------+--------+--------+
  |Delta-Window-Size                  |
  +--------+--------+--------+--------+

   Length: An unsigned 16-bit value representing the number of bytes
   which follow the frame header.  For WINDOW_UPDATE frames, this value
   is always 4.

   Stream-ID: The stream ID that this WINDOW_UPDATE control frame is
   for.  If the stream ID value is 0, the WINDOW_UPDATE frame applies to
   the session window.

   Delta-Window-Size: The additional number of bytes that the sender can
   transmit in addition to existing remaining window size.  The legal
   range for this field is 1 to 2^31 - 1 (0x7fffffff) bytes.

   The window size as kept by the sender must never exceed 2^31
   (although it can become negative in one special case).  If a sender
   receives a WINDOW_UPDATE that causes the window size to exceed this
   limit, then if the Stream-ID was 0, it MUST send a GOAWAY frame with
   status code FLOW_CONTROL_ERROR to terminate the session.  And if the
   Stream-ID references an active stream, it must send a RST_STREAM
   frame with status code FLOW_CONTROL_ERROR to terminate the stream.



Belshe & Peon           Expires February 2, 2013               [Page 25]

Internet-Draft                    SPDY                       August 2012


   When a SPDY connection is first established, the default initial
   window size for all streams is 64KB and the initial window size for
   the session is 64KB.  An endpoint can use the SETTINGS control frame
   to adjust the initial window size for the streams in the session.
   That is, its peer can start out using the 64KB default initial stream
   window size when sending data frames before receiving a SETTINGS
   frame.  Because SETTINGS is asynchronous, there may be a race
   condition if the recipient wants to decrease the initial window size,
   but its peer immediately sends 64KB on the creation of a new
   connection, before waiting for the SETTINGS to arrive.  This is one
   case where the window size kept by the sender will become negative.
   Once the sender detects this condition, it must stop sending data
   frames and wait for the recipient to catch up.  The recipient has two
   choices:

      immediately send RST_STREAM with FLOW_CONTROL_ERROR status code.

      allow the head of line blocking (as there is only one stream for
      the session and the amount of data in flight is bounded by the
      default initial window size), and send WINDOW_UPDATE as it
      consumes data.

   In the case of option 2, both sides must compute the stream window
   size based on the initial stream window size in the SETTINGS.  For
   example, if the recipient sets the initial stream window size to be
   16KB, and the sender sends 64KB for a stream immediately on session
   establishment, the sender will discover its window size is -48KB on
   receipt of the SETTINGS.  As the recipient consumes the first 16KB,
   it can send a WINDOW_UPDATE of 16KB back to the sender.  This
   interaction continues until the sender's window size becomes positive
   again, and it can resume transmitting data frames.

   After the recipient reads in a data frame with FLAG_FIN that marks
   the end of the data stream, it should not send WINDOW_UPDATE frames
   for the stream as it consumes the last data frame.  A sender should
   ignore all the WINDOW_UPDATE frames associated with the stream after
   it send the last frame for the stream.

   The data frames from the sender and the WINDOW_UPDATE frames from the
   recipient are completely asynchronous with respect to each other.
   This property allows a recipient to aggressively update the window
   size kept by the sender to prevent the stream from stalling.

2.6.11.  CREDENTIAL

   The CREDENTIAL control frame is used by the client to send additional
   client certificates to the server.  A SPDY client may decide to send
   requests for resources from different origins on the same SPDY



Belshe & Peon           Expires February 2, 2013               [Page 26]

Internet-Draft                    SPDY                       August 2012


   session if it decides that that server handles both origins.  For
   example if the IP address associated with both hostnames matches and
   the SSL server certificate presented in the initial handshake is
   valid for both hostnames.  However, because the SSL connection can
   contain at most one client certificate, the client needs a mechanism
   to send additional client certificates to the server.

   The server is required to maintain a vector of client certificates
   associated with a SPDY session.  When the client needs to send a
   client certificate to the server, it will send a CREDENTIAL frame
   that specifies the index of the slot in which to store the
   certificate as well as proof that the client posesses the
   corresponding private key.  The initial size of this vector must be
   8.  If the client provides a client certificate during the first TLS
   handshake, the contents of this certificate must be copied into the
   first slot (index 1) in the CREDENTIAL vector, though it may be
   overwritten by subsequent CREDENTIAL frames.  The server must
   exclusively use the CREDENTIAL vector when evaluating the client
   certificates associated with an origin.  The server may change the
   size of this vector by sending a SETTINGS frame with the setting
   SETTINGS_CLIENT_CERTIFICATE_VECTOR_SIZE value specified.  In the
   event that the new size is smaller than the current size, truncation
   occurs preserving lower-index slots as possible.

   TLS renegotiation with client authentication is incompatible with
   SPDY given the multiplexed nature of SPDY.  Specifically, imagine
   that the client has 2 requests outstanding to the server for two
   different pages (in different tabs).  When the renegotiation + client
   certificate request comes in, the browser is unable to determine
   which resource triggered the client certificate request, in order to
   prompt the user accordingly.

  0        1        2        3        4         5        6        7
  +--------+--------+--------+--------+-|-------+--------+--------+--------+
  | Length(16)      |    0xa |Flags(8)|X| Num-of-Entires(31)               | ->
  +--------+--------+--------+--------+-|-------+--------+--------+--------+

  8        9        10       11        12
  +--------+--------+--------+--------+========+
  | Slot(16)        |Proof Length(16) | Proof  | ->
  +--------+--------+--------+--------+========+

  /--Repeated to frame end--\
  +--------+--------+========+
  | Cert Length(16) | Cert   |
  +--------+--------+========+

   Slot: The index in the server's client certificate vector where this



Belshe & Peon           Expires February 2, 2013               [Page 27]

Internet-Draft                    SPDY                       August 2012


   certificate should be stored.  If there is already a certificate
   stored at this index, it will be overwritten.  The index is one
   based, not zero based; zero is an invalid slot index.

   Proof: Cryptographic proof that the client has possession of the
   private key associated with the certificate.  The format is a TLS
   digitally-signed element
   (http://tools.ietf.org/html/rfc5246#section-4.7).  The signature
   algorithm must be the same as that used in the CertificateVerify
   message.  However, since the MD5+SHA1 signature type used in TLS 1.0
   connections can not be correctly encoded in a digitally-signed
   element, SHA1 must be used when MD5+SHA1 was used in the SSL
   connection.  The signature is calculated over a 32 byte TLS extractor
   value (http://tools.ietf.org/html/rfc5705) with a label of "EXPORTER
   SPDY certificate proof" using the empty string as context.  ForRSA
   certificates the signature would be a PKCS#1 v1.5 signature.  For
   ECDSA, it would be an ECDSA-Sig-Value
   (http://tools.ietf.org/html/rfc5480#appendix-A).  For a 1024-bit RSA
   key, the CREDENTIAL message would be ~500 bytes.

   Certificate: The certificate chain, starting with the leaf
   certificate.  Each certificate must be encoded as a 32 bit length,
   followed by a DER encoded certificate.  The certificate must be of
   the same type (RSA, ECDSA, etc) as the client certificate associated
   with the SSL connection.

   If the server receives a request for a resource with unacceptable
   credential (either missing or invalid), it must reply with a
   RST_STREAM frame with the status code INVALID_CREDENTIALS.  Upon
   receipt of a RST_STREAM frame with INVALID_CREDENTIALS, the client
   should initiate a new stream directly to the requested origin and
   resend the request.  Note, SPDY does not allow the server to request
   different client authentication for different resources in the same
   origin.

   If the server receives an invalid CREDENTIAL frame, it MUST respond
   with a GOAWAY frame and shutdown the session.

2.6.12.  Name/Value Header Block

   A Name/Value Header Block augments the streams or group of streams
   identified by the SYN_STREAM (Section 2.6.2), HEADERS
   (Section 2.6.9), or SYN_REPLY (Section 2.6.3) frame stream with
   additional metadata.

   At the group level, a map of token-index to key-pair is maintained
   for each defined group.  There is no persistent mapping from
   stream-id to header-group, instead each HeaderBlock includes



Belshe & Peon           Expires February 2, 2013               [Page 28]

Internet-Draft                    SPDY                       August 2012


   reference to the HeaderGroup that will be used in this particular set
   of metadata.

   The HeaderBlock compressor (described later) is subject to the
   following constraints:

      TotalHeaderStorageSize : default(16k)

      MaxHeaderGroups: default(1)

      MaxValEntries: default(64)

   It is expected that either party will set these to larger values
   immediately upon connection establishment using the SETTINGS frame.

   A stream with a HeaderBlock which declares that it is using
   HeaderGroup 'G' would use the following algorithm to interpret its
   meta-data.

                def compute_headers(stream):
                headers = {}
                for index in stream_group[G]:
                headers[lru_lookup[index].key] = lru_lookup[index].val)
                for {key, value} in ephemereal_headers_from_HeaderBlock:
                headers[key] = value
                return headers

   A smart implementation will be able to interpret a headers frame
   without reconstructing the headers, and thus be able to represent and
   interpret headers with less memory and CPU.

   The Name/Value Header Block is found in the SYN_STREAM, SYN_REPLY and
   HEADERS control frames, and shares a common format:

                   0        1        2          3..N       N+1..K
                   +--------+--------+--------+=====+     +=====+
                   | HG(8)  | next-lru-seq-num| Ops | ... | Ops |
                   +--------+--------+--------+=====+     +=====+

   Ops are of the form:

                     +--------+--------+=========+
                     | OpCode | NumOps | Op Args |
                     +--------+--------+=========+

   HG: (Header Group) An 8 bit unsigned integer specifying the header
   group for this set of headers.




Belshe & Peon           Expires February 2, 2013               [Page 29]

Internet-Draft                    SPDY                       August 2012


   Ops: A number of operations.  Operations will be detailed below.

   The Opcode field indicates the type of operation.

      0x0 (reserved) -- this is not used and is reserved in case a
      token-based delimiter is required in the future.

      0x1 (Toggle) indicates that the data which follows will be an lru-
      index.  That lru-index, if present in the current header-group
      will be removed from the header group.  If it is not present in
      the current header group, it will be added to the current header
      group.  This opcode thus affects what parts of the data stored in
      the LRU are interpreted as being visible in the current set of
      headers for whatever frame includes the HeaderBlock

      0x1 (Clone) indicates that the data which follows will be a key-
      index and a string literal.  The key-index is used to refer to a
      pre-existing key, and thus the operation results in the storing of
      the pre-existing key and the new value.  The key-value will be
      appended to the LRU, and the index in the LRU added to the current
      header group.

      0x2 (KVSto) indicates that the data which follows will be two
      string literals.  The first such string represents a new key to be
      stored, and the second such string represents a value.  As with
      Clone, the key-value will be stored in the LRU with a new index,
      and that index will be added to the current header group.

      0x2 (Eref) indicates that the data which follows will be two
      string literals.  The first such string represents key, and the
      second string represents a value.  Unlike KVSto, the Eref does not
      modify the compressor state-- it only specified a key-value which
      will be interpreted as being part of the meta-data for the frame
      which includes the HeaderBlock.

   String are always encoded as a single bit, followed by data.  If that
   bit is '0', then what follows is 7-bit us-ascii, null-terminated.  If
   that bit is '1', then it is huffman encoded using a canonical
   huffman-code and ends with an 'eof' character (which is not part of
   the string).  If the last bit of the EOF is not immediately before
   the byte boundary, the remaining bits of that byte are padded with
   zero.  Strings in a request are encoded with a different huffman-
   encoder than strings in a response, as the frequency of occurance in
   these differ by quite a bit.







Belshe & Peon           Expires February 2, 2013               [Page 30]

Internet-Draft                    SPDY                       August 2012


                  A string is either:
                  +-|============================|====================|--------+
                  |1| huffman-encoded-characters | huffman-eof-symbol |pad-bits|
                  +-|============================|====================|--------+

                  or

                  +-|-------+========+--------+
                  |0|  7 bit-ascii   |00000000|
                  +-|-------+========+--------+

   The NumOps field encodes one minus the number of operations that
   follow.  Since the field-width is 8 bits, a maximum of 256 ops can be
   represented.  If more than 256 operations are required, simply repeat
   doing this until all operations have been encoded.  It is expected
   that this will be extremely rare.

   Detail of an operation with an opcode of 0x1 (Toggle):

                     0        1
                     +--------+--------+
                     |00000001| NumOps |
                     +--------+--------+


                     repeated NumOps times
                       ______/ \______
                      /               \

                     +--------+--------+
                     | LRU idx(16)     |
                     +--------+--------+

   Detail of an operation with an opcode of 0x2 (Clone):

                     0        1
                     +--------+--------+
                     |00000010| NumOps |
                     +--------+--------+


                        repeated NumOps times
                       ___________/\___________
                      /                        \

                     +--------+--------+========+
                     | Key idx(16)     | String |
                     +--------+--------+========+



Belshe & Peon           Expires February 2, 2013               [Page 31]

Internet-Draft                    SPDY                       August 2012


   Detail of an operation with an opcode of 0x3 (KVSto):

                     0        1
                     +--------+--------+
                     |00000011| NumOps |
                     +--------+--------+


                     repeated NumOps times
                       _______/\______
                      /               \

                     +========+========+
                     | String | String |
                     +========+========+

   Detail of an operation with an opcode of 0x4 (Eref):

                     0        1
                     +--------+--------+
                     |00000100| NumOps |
                     +--------+--------+


                     repeated NumOps times
                       _______/\______
                      /               \

                     +========+========+
                     | String | String |
                     +========+========+

   Each header name must have at least one value.  Header names are
   encoded using the US-ASCII character set [ASCII] and must be all
   lower case.  The length of each name must be greater than zero.  A
   recipient of a zero-length name MUST issue a stream error
   (Section 2.4.2) with the status code PROTOCOL_ERROR for the
   stream-id.

   Duplicate header names are allowed, but discouraged, except when
   encoding a cookie or set-cookie.

2.6.12.1.  Compression

   The Name/Value Header Block is a section of the SYN_STREAM,
   SYN_REPLY, and HEADERS frames used to carry header meta-data.  This
   block is always compressed using zlib compression.  Within this
   specification, any reference to 'zlib' is referring to the ZLIB



Belshe & Peon           Expires February 2, 2013               [Page 32]

Internet-Draft                    SPDY                       August 2012


   Compressed Data Format Specification Version 3.3 as part of RFC1950.
   [RFC1950]

   For each HEADERS compression instance, the initial state is
   initialized using the following dictionary [UDELCOMPRESSION]:

                  Request 1 (for index.html):
                  SYN_STREAM 1, stream-group (G)=0
                  Header-block:
                  Store(0x1): level(C),index(0),k: ":method"
                  Store(0x1): level(C),index(0),v: "GET"
                  Store(0x1): level(C),index(1),k: ":version"
                  Store(0x1): level(C),index(1),v: "HTTP/1.1"
                  Store(0x1): level(C),index(2),k: "user-agent"
                  Store(0x1): level(C),index(2),v: "blah blah browser version blah blah"
                  Store(0x1): level(C),index(3),k: "accept-encoding"
                  Store(0x1): level(C),index(3),v: "sdch, bzip, compress"
                  Store(0x1): level(G),index(0),k: ":host"
                  Store(0x1): level(G),index(0),v: "www.foo.com"
                  Store(0x1): level(G),index(1),k: "cookie"
                  Store(0x1): level(G),index(1),v: "SOMELONGSTRINGTHATISMOSTLYOPAQUE;BLAJHBLA"
                  Store(0x1): level(G),index(2),k: ":path"
                  Store(0x1): level(G),index(2),v: "/index.html"
                  Store(0x1): level(G),index(3),k: "date"
                  Store(0x1): level(G),index(3),v: "Wed Jul 18 11:50:43 2012"

                  At this point the connection headers table looks like this:
                  0: ":method", "GET"
                  1: ":version", "HTTP/1.1"
                  2: "user-agent", "blah blah browser version blah blah"
                  3: "accept-encoding", "sdch, bzip, compress"

                  The stream-group table for group zero looks like this:
                  0: ":host", "www.foo.com"
                  1: "cookie", "SOMELONGSTRINGHTATISMOSTLYOPAQUE;BLAJHBLA"
                  2: ":path", "/index.html"
                  3: "date", "Wed Jul 18 11:50:43 2012"

                  Request 1 (on stream 1) would look like the following if forwarded on HTTP/1.1:
                  GET /index.html HTTP/1.1
                  host: www.foo.com
                  date: Wed Jul 18 11:50:43 2012
                  cookie: SOMELONGSTRINGTHATISMOSTLYOPAQUE;BLAJHBLA
                  user-agent: blah blah browser version blah blah
                  accept-encoding: sdch, bzip, compress


                  Request 2 (for index.js):



Belshe & Peon           Expires February 2, 2013               [Page 33]

Internet-Draft                    SPDY                       August 2012


                  SYN_STREAM 3, stream-group (G)=0
                  Header-block:
                  Store(0x1): level(G),index(2),v: "/index.js"
                  Store(0x1): level(G),index(3),v: "Wed Jul 18 11:50:44 2012"

                  At this point the connection headers table is unchanged:
                  0: ":method", "GET"
                  1: ":version", "HTTP/1.1"
                  2: "user-agent", "blah blah browser version blah blah"
                  3: "accept-encoding", "sdch, bzip, compress"

                  The stream-group table for group zero looks like this:
                  0: ":host", "www.foo.com"
                  1: "cookie", "SOMELONGSTRINGHTATISMOSTLYOPAQUE;BLAJHBLA"
                  2: ":path", "/index.js"
                  3: "date", "Wed Jul 18 11:50:44 2012"
                  Both the path and the date have changed.

                  Request 2 (on stream 3) would look like the following if forwarded on HTTP/1.1:
                  GET /index.js HTTP/1.1
                  host: www.foo.com
                  date: Wed Jul 18 11:50:44 2012
                  cookie: SOMELONGSTRINGTHATISMOSTLYOPAQUE;BLAJHBLA
                  user-agent: blah blah browser version blah blah
                  accept-encoding: sdch, bzip, compress


                  Request 3 (for index.css):
                  SYN_STREAM 5, stream-group (G)=0
                  Header-block:
                  Store(0x1): level(G),index(2),v: "/index.css"
                  Store(0x1): level(G),index(3),v: "Wed Jul 18 11:50:44 PDT 2012"

                  Connection level-headers are implied.
                  Stream-group level headers are implied.

                  For this example, using TaCo (truncate and concatenate) wasn't useful.
                  If the user, however, changes the cookie on the next request...

                  Request 3 (for somepage.html):
                  SYN_STREAM 5, stream-group (G)=0
                  Header-block:
                  Store(0x1): level(G),index(2),v: "/somepage.html"
                  TaCo(0x1): level(G),index(1),v,TruncTo(40),"FOOBLA"

                  At this point the connection headers table remains unchanged.
                  0: ":method", "GET"
                  1: ":version", "HTTP/1.1"



Belshe & Peon           Expires February 2, 2013               [Page 34]

Internet-Draft                    SPDY                       August 2012


                  2: "user-agent", "blah blah browser version blah blah"
                  3: "accept-encoding", "sdch, bzip, compress"

                  The stream-group table for group zero looks like this:
                  0: ":host", "www.foo.com"
                  1: "cookie", "SOMELONGSTRINGHTATISMOSTLYOPAQUE;FOOBLA"
                  2: ":path", "/somepate.html"
                  Both the path and the date have changed.

                  Request 3 (on stream 5) would look like the following if forwarded on HTTP/1.1:
                  GET /somepage.html HTTP/1.1
                  host: www.foo.com
                  date: Wed Jul 18 11:50:44 2012
                  cookie: SOMELONGSTRINGTHATISMOSTLYOPAQUE;FOOBLA
                  user-agent: blah blah browser version blah blah
                  accept-encoding: sdch, bzip, compress



































Belshe & Peon           Expires February 2, 2013               [Page 35]

Internet-Draft                    SPDY                       August 2012


3.  HTTP Layering over SPDY

   SPDY is intended to be as compatible as possible with current web-
   based applications.  This means that, from the perspective of the
   server business logic or application API, the features of HTTP are
   unchanged.  To achieve this, all of the application request and
   response header semantics are preserved, although the syntax of
   conveying those semantics has changed.  Thus, the rules from the
   HTTP/1.1 specification in RFC2616 [RFC2616] apply with the changes in
   the sections below.

3.1.  Connection Management

   Clients SHOULD NOT open more than one SPDY session to a given origin
   [RFC6454] concurrently.

   Note that it is possible for one SPDY session to be finishing (e.g. a
   GOAWAY message has been sent, but not all streams have finished),
   while another SPDY session is starting.

3.1.1.  Use of GOAWAY

   SPDY provides a GOAWAY message which can be used when closing a
   connection from either the client or server.  Without a server GOAWAY
   message, HTTP has a race condition where the client sends a request
   (a new SYN_STREAM) just as the server is closing the connection, and
   the client cannot know if the server received the stream or not.  By
   using the last-stream-id in the GOAWAY, servers can indicate to the
   client if a request was processed or not.

   Note that some servers will choose to send the GOAWAY and immediately
   terminate the connection without waiting for active streams to
   finish.  The client will be able to determine this because SPDY
   streams are determinstically closed.  This abrupt termination will
   force the client to heuristically decide whether to retry the pending
   requests.  Clients always need to be capable of dealing with this
   case because they must deal with accidental connection termination
   cases, which are the same as the server never having sent a GOAWAY.

   More sophisticated servers will use GOAWAY to implement a graceful
   teardown.  They will send the GOAWAY and provide some time for the
   active streams to finish before terminating the connection.

   If a SPDY client closes the connection, it should also send a GOAWAY
   message.  This allows the server to know if any server-push streams
   were received by the client.

   If the endpoint closing the connection has not received any



Belshe & Peon           Expires February 2, 2013               [Page 36]

Internet-Draft                    SPDY                       August 2012


   SYN_STREAMs from the remote, the GOAWAY will contain a last-stream-id
   of 0.

3.2.  HTTP Request/Response

3.2.1.  Request

   The client initiates a request by sending a SYN_STREAM frame.  For
   requests which do not contain a body, the SYN_STREAM frame MUST set
   the FLAG_FIN, indicating that the client intends to send no further
   data on this stream.  For requests which do contain a body, the
   SYN_STREAM will not contain the FLAG_FIN, and the body will follow
   the SYN_STREAM in a series of DATA frames.  The last DATA frame will
   set the FLAG_FIN to indicate the end of the body.

   The SYN_STREAM Name/Value section will contain all of the HTTP
   headers which are associated with an HTTP request.  The header block
   in SPDY is mostly unchanged from today's HTTP header block, with the
   following differences:

      The first line of the request is unfolded into name/value pairs
      like other HTTP headers and MUST be present:

         ":method" - the HTTP method for this request (e.g.  "GET",
         "POST", "HEAD", etc)

         ":path" - the url-path for this url with "/" prefixed.  (See
         RFC3986 [RFC3986]).  For example, for
         "http://www.google.com/search?q=dogs" the path would be
         "/search?q=dogs".

         ":version" - the HTTP version of this request (e.g.
         "HTTP/1.1")

      In addition, the following two name/value pairs must also be
      present in every request:

         ":host" - the hostport (See RFC1738 [RFC1738]) portion of the
         URL for this request (e.g. "www.google.com:1234").  This header
         is the same as the HTTP 'Host' header.

         ":scheme" - the scheme portion of the URL for this request
         (e.g. "https"))

      Header names are all lowercase.

      The Connection, Host, Keep-Alive, Proxy-Connection, and Transfer-
      Encoding headers are not valid and MUST not be sent.



Belshe & Peon           Expires February 2, 2013               [Page 37]

Internet-Draft                    SPDY                       August 2012


      User-agents MUST support gzip compression.  Regardless of the
      Accept-Encoding sent by the user-agent, the server may always send
      content encoded with gzip or deflate encoding.

      If a server receives a request where the sum of the data frame
      payload lengths does not equal the size of the Content-Length
      header, the server MUST return a 400 (Bad Request) error.

      POST-specific changes:

         Although POSTs are inherently chunked, POST requests SHOULD
         also be accompanied by a Content-Length header.  There are two
         reasons for this: First, it assists with upload progress meters
         for an improved user experience.  But second, we know from
         early versions of SPDY that failure to send a content length
         header is incompatible with many existing HTTP server
         implementations.  Existing user-agents do not omit the Content-
         Length header, and server implementations have come to depend
         upon this.

   The user-agent is free to prioritize requests as it sees fit.  If the
   user-agent cannot make progress without receiving a resource, it
   should attempt to raise the priority of that resource.  Resources
   such as images, SHOULD generally use the lowest priority.

   If a client sends a SYN_STREAM without all of the method, host, path,
   scheme, and version headers, the server MUST reply with a HTTP 400
   Bad Request reply.

3.2.2.  Response

   The server responds to a client request with a SYN_REPLY frame.
   Symmetric to the client's upload stream, server will send data after
   the SYN_REPLY frame via a series of DATA frames, and the last data
   frame will contain the FLAG_FIN to indicate successful end-of-stream.
   If a response (like a 202 or 204 response) contains no body, the
   SYN_REPLY frame may contain the FLAG_FIN flag to indicate no further
   data will be sent on the stream.

      The response status line is unfolded into name/value pairs like
      other HTTP headers and must be present:

         ":status" - The HTTP response status code (e.g. "200" or "200
         OK")

         ":version" - The HTTP response version (e.g.  "HTTP/1.1")





Belshe & Peon           Expires February 2, 2013               [Page 38]

Internet-Draft                    SPDY                       August 2012


      All header names must be lowercase.

      The Connection, Keep-Alive, Proxy-Connection, and Transfer-
      Encoding headers are not valid and MUST not be sent.

      Responses MAY be accompanied by a Content-Length header for
      advisory purposes. (e.g. for UI progress meters)

      If a client receives a response where the sum of the data frame
      payload lengths does not equal the size of the Content-Length
      header, the client MUST ignore the content length header.

   If a client receives a SYN_REPLY without a status or without a
   version header, the client must reply with a RST_STREAM frame
   indicating a PROTOCOL ERROR.

3.2.3.  Authentication

   When a client sends a request to an origin server that requires
   authentication, the server can reply with a "401 Unauthorized"
   response, and include a WWW-Authenticate challenge header that
   defines the authentication scheme to be used.  The client then
   retries the request with an Authorization header appropriate to the
   specified authentication scheme.

   There are four options for proxy authentication, Basic, Digest, NTLM
   and Negotiate (SPNEGO).  The first two options were defined in
   RFC2617 [RFC2617], and are stateless.  The second two options were
   developed by Microsoft and specified in RFC4559 [RFC4559], and are
   stateful; otherwise known as multi-round authentication, or
   connection authentication.

3.2.3.1.  Stateless Authentication

   Stateless Authentication over SPDY is identical to how it is
   performed over HTTP.  If multiple SPDY streams are concurrently sent
   to a single server, each will authenticate independently, similar to
   how two HTTP connections would independently authenticate to a proxy
   server.

3.2.3.2.  Stateful Authentication

   Unfortunately, the stateful authentication mechanisms were
   implemented and defined in a such a way that directly violates
   RFC2617 - they do not include a "realm" as part of the request.  This
   is problematic in SPDY because it makes it impossible for a client to
   disambiguate two concurrent server authentication challenges.




Belshe & Peon           Expires February 2, 2013               [Page 39]

Internet-Draft                    SPDY                       August 2012


   To deal with this case, SPDY servers using Stateful Authentication
   MUST implement one of two changes:

      Servers can add a "realm=<desired realm>" header so that the two
      authentication requests can be disambiguated and run concurrently.
      Unfortunately, given how these mechanisms work, this is probably
      not practical.

      Upon sending the first stateful challenge response, the server
      MUST buffer and defer all further frames which are not part of
      completing the challenge until the challenge has completed.
      Completing the authentication challenge may take multiple round
      trips.  Once the client receives a "401 Authenticate" response for
      a stateful authentication type, it MUST stop sending new requests
      to the server until the authentication has completed by receiving
      a non-401 response on at least one stream.

3.3.  Server Push Transactions

   SPDY enables a server to send multiple replies to a client for a
   single request.  The rationale for this feature is that sometimes a
   server knows that it will need to send multiple resources in response
   to a single request and would otherwise be forced to inline the
   images into the document.  Without server push features, the server
   must inline, or the client must first download the primary resource,
   then discover the secondary resource(s), and request them.  Pushing
   of resources avoids the round-trip delay, but also creates a
   potential race where a server can be pushing content which a user-
   agent is in the process of requesting.  The following mechanics
   attempt to prevent the race condition while enabling the performance
   benefit.  Server push is designed to be strictly better than
   inlining.

   Browsers receiving a pushed response MUST validate that the server is
   authorized to push the URL using the browser same-origin [RFC6454]
   policy, or by verifying that the server has proven (via SSL handshake
   or CERTIFICATE frame) that it has the certificate for the domain of
   the pushed content.  For example, a SPDY connection to www.foo.com is
   generally not permitted to push a response for www.evil.com.  A SPDY
   connection to www.foo.com would be allowed to push images.foo.com,
   however, assuming the cert provided at the SSL handshake was a
   wildcard cert encoding *.foo.com

   If the browser accepts a pushed response (e.g. it does not send a
   RST_STREAM), the browser MUST attempt to cache the pushed response in
   same way that it would cache any other response.  This means
   validating the response headers and inserting into the cache.




Belshe & Peon           Expires February 2, 2013               [Page 40]

Internet-Draft                    SPDY                       August 2012


   Because pushed responses have no request, they have no request
   headers associated with them.  At the framing layer, SPDY pushed
   streams contain an "associated-stream-id" which indicates the
   requested stream for which the pushed stream is related.  The pushed
   stream inherits all of the headers from the associated-stream-id with
   the exception of ":host", ":scheme", and ":path", which are provided
   as part of the pushed response stream headers.  The browser MUST
   store these inherited and implied request headers with the cached
   resource.

   Implementation note: Similarly with inlining, with server push it is
   theoretically possible for servers to push large amounts of content
   or resources to the user-agent.  Browsers MUST implement throttles to
   protect against unreasonable push attacks, just as they must react
   reasonably to abuse of inlining.  The server-push mechanism should
   make this easier to deal with than inlining in basically every case.

3.3.1.  Server implementation

   When the server intends to push a resource to the user-agent, it
   promises that it will opens a new stream in the future (but not now)
   by sending a PUSH_PROMISE frame.  The PUSH_PROMISE frame MUST include
   an Associated-To-Stream-ID, Prmoised-Stream-ID, and MUST ensure that
   headers for ":scheme", ":host", ":path" representing the URL for the
   resource being pushed are either already present in the implied
   headers context (i.e. the request headers), or it must override the
   headers which do not match the pushed resource.  The ":path" MUST
   always be different from the originally request resource.  The
   stream-IDs represented in the Promised-Stream-ID field MUST NOT count
   towards the MAX_CONCURRENT_STREAMS limit.  When the server is ready
   to send the resource, it will send a SYN_REPLY with the stream-ID
   indicated by the Promised-Stream-ID send in the PUSH_PROMISE frame
   earlier.  As with any other SYN_REPLY, subsequent headers may follow
   in HEADERS frames.  The purpose of the association is so that the
   user-agent can differentiate which request induced the pushed stream;
   without it, if the user-agent had two tabs open to the same page,
   each pushing unique content under a fixed URL, the user-agent would
   not be able to differentiate the requests.

   The Associated-To-Stream-ID must be the ID of an existing, open
   stream.  The reason for this restriction is to have a clear endpoint
   for pushed content.  If the user-agent requested a resource on stream
   11, the server replies on stream 11.  It can push any number of
   additional streams to the client before sending a FLAG_FIN on stream
   11.  However, once the originating stream is closed no further push
   streams may be associated with it.  The pushed streams do not need to
   be closed (FIN set) before the originating stream is closed, they
   only need to be created before the originating stream closes.



Belshe & Peon           Expires February 2, 2013               [Page 41]

Internet-Draft                    SPDY                       August 2012


   To prevent a race condition with the client, the server must only use
   the client certificate of the associated stream when pushing
   resources.

   It is illegal for a server to push a resource with the Associated-To-
   Stream-ID of 0, or with a Slot that is not 0.

   To minimize race conditions with the client, the SYN_STREAM for the
   pushed resources MUST be sent prior to sending any content which
   could allow the client to discover the pushed resource and request
   it.

   The server MUST only push resources which would have been returned
   from a GET request.

   Note: If the server does not have all of the Name/Value Response
   headers available at the time it issues the HEADERS frame for the
   pushed resource, it may later use an additional HEADERS frame to
   augment the name/value pairs to be associated with the pushed stream.
   The subsequent HEADERS frame(s) must not contain a header for
   ':host', ':scheme', or ':path' (e.g. the server can't change the
   identity of the resource to be pushed).  The HEADERS frame must not
   contain duplicate headers with a previously sent HEADERS frame.  The
   server must send a HEADERS frame including the scheme/host/port
   headers before sending any data frames on the stream.

3.3.2.  Client implementation

   When fetching a resource the client has 3 possibilities:

      the resource is not being pushed

      the resource is being pushed, but the data has not yet arrived

      the resource is being pushed, and the data has started to arrive

   When a SYN_STREAM and HEADERS frame which contains an Associated-To-
   Stream-ID is received, the client must not issue GET requests for the
   resource in the pushed stream, and instead wait for the pushed stream
   to arrive.

   If a client receives a server push stream with stream-id 0, it MUST
   issue a session error (Section 2.4.1) with the status code
   PROTOCOL_ERROR.

   When a client receives a SYN_STREAM from the server without a the
   ':host', ':scheme', and ':path' headers in the Name/Value section, it
   MUST reply with a RST_STREAM with error code HTTP_PROTOCOL_ERROR.



Belshe & Peon           Expires February 2, 2013               [Page 42]

Internet-Draft                    SPDY                       August 2012


   To cancel individual server push streams, the client can issue a
   stream error (Section 2.4.2) with error code CANCEL.  Upon receipt,
   the server MUST stop sending on this stream immediately (this is an
   Abrupt termination).

   To cancel all server push streams related to a request, the client
   may issue a stream error (Section 2.4.2) with error code CANCEL on
   the associated-stream-id.  By cancelling that stream, the server MUST
   immediately stop sending frames for any streams with
   in-association-to for the original stream.

   If the server sends a HEADER frame containing duplicate headers with
   a previous HEADERS frame for the same stream, the client must issue a
   stream error (Section 2.4.2) with error code PROTOCOL ERROR.

   If the server sends a HEADERS frame after sending a data frame for
   the same stream, the client MAY ignore the HEADERS frame.  Ignoring
   the HEADERS frame after a data frame prevents handling of HTTP's
   trailing headers
   (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.40).































Belshe & Peon           Expires February 2, 2013               [Page 43]

Internet-Draft                    SPDY                       August 2012


4.  WebSocket Layering over SPDY

   With this layering, a client and sever can share one connection for
   both of HTTP requests and WebSockets.

4.1.  Connection Management

4.1.1.  Opening Handshake

4.1.1.1.  Handshake Request

   The client initiates an opening handshake by sending a SYN_STREAM
   frame.  The SYN_STREAM frame MUST NOT set the FLAG_FIN because
   WebSocket intends to establish a bi-directional communication port
   and to send arbitrary data after success in opening handshake.

   The SYN_STREAM Name/Value section will contain all of the following
   headers which are associated with The WebSocket protocol [RFC6455]
   opening handshake.  Upgrade, Connection, Sec-WebSocket-Key, and Sec-
   WebSocket-Version headers MUST NOT be included because we do not have
   to take care of protocol upgrading or verification over HTTP.

   The following name/value pairs MUST be present in every request:

      ":path" - /resource name/ as used in the "Client Requirements"
      section of the WebSocket protocol specification.  (See RFC6455
      [RFC6455])

      ":host" - /host:port/ (e.g. "www.google.com:1234") as used in the
      "Client Requirements" section of the WebSocket protocol
      specification.  (See RFC6455 [RFC6455])

      ":version" - the WebSocket protocol version of this request.
      (MUST be "WebSocket/8", "WebSocket/13", or so.  The number MUST be
      matched with the Sec-WebSocket-Version header.  See RFC6455
      [RFC6455])

      ":scheme" - the scheme portion of the URI.  (MUST be "ws" or
      "wss".  See also /secure/ flag in RFC6455 [RFC6455])

      ":origin" - /origin/ as used in the "Client Requirements" section
      of the WebSocket protocol specification.  (See RFC6455 [RFC6455])

   In addition, the following OPTIONAL name/value pairs MAY be present:

      ":sec-websocket-protocol" - the Sec-WebSocket-Protocol header (See
      RFC6455 [RFC6455])




Belshe & Peon           Expires February 2, 2013               [Page 44]

Internet-Draft                    SPDY                       August 2012


      ":sec-websocket-extensions" - the Sec-WebSocket-Extensions header
      (See RFC6455 [RFC6455])

   Also, other HTTP compatible header name/value pairs MAY be present.
   All header keys MUST be lowercase.

4.1.1.2.  Handshake Response

   The server responds to a client request with a SYN_REPLY frame.  If
   the server intends to allow the client connection, SYN_REPLY frame
   MUST NOT set the FLAG_FIN and MUST have ":status" containing "101".
   But, an unsuccessful response MUST set the FLAG_FIN and MUST have
   ":status" containing non-"101" code.  The server MAY fail the opening
   handshake because of an unexpected header value or a missing
   mandatory header name.

   The client MAY send some data to the server before receiving the
   successful response.  The server MUST ignore this data when opening
   handshake fails.  After sending successful response, the server can
   send arbitrary data frames at any time.

   The response status line is unfolded into name/value pairs like other
   WebSocket headers and MUST be present:

      ":status" - The WebSocket or fallback HTTP response status code
      (e.g. "101" or "101 Switching Protocols".  See RFC6455 [RFC6455])

   In addition, the following OPTIONAL name/value pairs MAY be present:

      ":sec-websocket-protocol" - the Sec-WebSocket-Protocol header (See
      RFC6455 [RFC6455])

      ":sec-websocket-extensions" - the Sec-WebSocket-Extensions header
      (See RFC6455 [RFC6455])

   Also, other HTTP compatible header name/value pairs MAY be present.
   All header names MUST be lowercase.  The successful server response
   MUST have ":status" containing "101".

   If the handshake fails, the client MUST send a SPDY data frame with
   empty data field to avoid abnormal SPDY session termination.  The
   SPDY data frame MUST set the FLAG_FIN to indicate the client intends
   to send no further data on this stream.

4.1.2.  Closing Handshake






Belshe & Peon           Expires February 2, 2013               [Page 45]

Internet-Draft                    SPDY                       August 2012


4.1.2.1.  Normal Termination

   In normal termination, WebSocket connection close frame RFC6455
   [RFC6455] will be sent as a SPDY data frame with FLAG_FIN set.  The
   closing handshake is based on WebSocket protocol specification.  Both
   of a server and a client will initiate it then the other end MUST
   respond it by connection close frame with FLAG_FIN set.

4.1.2.2.  Abnormal Termination and CloseEvent Handling

   In abnormal termination, RST_STREAM SHOULD be handled as connection
   close frame.  It means that JavaScript API provides CloseEvent (See,
   The WebSocket API [WEBSOCKETAPI]) when a client receives RST_STREAM.
   Its code field SHOULD be 1006 (Abnormal Closure).  The GOAWAY control
   frame with non-zero status code SHOULD be also handled in the same
   way.  The status code of RST_STREAM and GOAWAY frames SHOULD be
   encoded to UTF-8 string with its frame type for its reason field.
   (e.g.  "SPDY/3 RST_STREAM (5)" or "SPDY/3 GOAWAY (1)")

   If a server works as protocol bridge to the WebSocket protocol, it
   MAY send a close frame which contains the above status code and the
   above reason to a backend WebSocket server.

4.2.  Bi-directional Communication

   After the opening handshake, the client and the server can send
   arbitrary WebSocket control and data frames.  Continuation frame,
   text frame, binary frame, connection close frame, ping frame, and
   pong frame are valid WebSocket frames.  These WebSocket frames are
   mapped into each SPDY HEADERS frame and DATA frames as follow.

4.2.1.  Frame mapping

   One WebSocket frame is mapped into one proceeding SPDY HEADERS frame
   and following plural SPDY data frames.  The SPDY HEADERS frame must
   contain WebSocket frame fields and following SPDY data frames contain
   payload data.  These data frames are free to be reframed.

   This plan doesn't care about overheads.  But HEADERS frame are
   compressed by shared dictionary with other SYN_STREAM, SYN_REPLY, and
   other HEADERS in the same SPDY connection.  Optimistically, it
   reduces framing overheads.

   The following name/value pairs MUST be present in SPDY HEADERS
   frames:

      ":opcode" - The WebSocket frame opcode (See RFC6455 [RFC6455])




Belshe & Peon           Expires February 2, 2013               [Page 46]

Internet-Draft                    SPDY                       August 2012


      ":length" - The WebSocket frame payload length in decimal (See
      RFC6455 [RFC6455])

      ":fin" - The WebSocket frame fin (See RFC6455 [RFC6455])

   In addition, the following OPTIONAL name/value pairs MAY be present:

      ":rsv1" - The WebSocket frame rsv1

      ":rsv2" - The WebSocket frame rsv2

      ":rsv3" - The WebSocket frame rsv3 (See RFC6455 [RFC6455]).  These
      values must contain "0" or "1".  When a key doesn't exist, the
      value is considered to be "0".  Thus, ony enabled bits may appear
      here.

      ":masking-key" - The WebSocket frame masking-key (See RFC6455
      [RFC6455]) in hexadecimal (e.g. "deadbeaf").  When this key/value
      exist, the WebSocket frame mask (See RFC6455 [RFC6455]) is
      considered to be 1 and following payload data MUST be masked(See
      RFC6455 [RFC6455]), otherwise the WebSocket frame mask is
      considered to be 0.





























Belshe & Peon           Expires February 2, 2013               [Page 47]

Internet-Draft                    SPDY                       August 2012


5.  Design Rationale and Notes

   Authors' notes: The notes in this section have no bearing on the SPDY
   protocol as specified within this document, and none of these notes
   should be considered authoritative about how the protocol works.
   However, these notes may prove useful in future debates about how to
   resolve protocol ambiguities or how to evolve the protocol going
   forward.  They may be removed before the final draft.

5.1.  Separation of Framing Layer and Application Layer

   Readers may note that this specification sometimes blends the framing
   layer (Section 2) with requirements of a specific application - HTTP
   (Section 3).  This is reflected in the request/response nature of the
   streams, the definition of the HEADERS and compression contexts which
   are very similar to HTTP, and other areas as well.

   This blending is intentional - the primary goal of this protocol is
   to create a low-latency protocol for use with HTTP.  Isolating the
   two layers is convenient for description of the protocol and how it
   relates to existing HTTP implementations.  However, the ability to
   reuse the SPDY framing layer is a non goal.

5.2.  Error handling - Framing Layer

   Error handling at the SPDY layer splits errors into two groups: Those
   that affect an individual SPDY stream, and those that do not.

   When an error is confined to a single stream, but general framing is
   in tact, SPDY attempts to use the RST_STREAM as a mechanism to
   invalidate the stream but move forward without aborting the
   connection altogether.

   For errors occuring outside of a single stream context, SPDY assumes
   the entire session is hosed.  In this case, the endpoint detecting
   the error should initiate a connection close.

5.3.  One Connection Per Domain

   SPDY attempts to use fewer connections than other protocols have
   traditionally used.  The rationale for this behavior is because it is
   very difficult to provide a consistent level of service (e.g.  TCP
   slow-start), prioritization, or optimal compression when the client
   is connecting to the server through multiple channels.

   Through lab measurements, we have seen consistent latency benefits by
   using fewer connections from the client.  The overall number of
   packets sent by SPDY can be as much as 40% less than HTTP.  Handling



Belshe & Peon           Expires February 2, 2013               [Page 48]

Internet-Draft                    SPDY                       August 2012


   large numbers of concurrent connections on the server also does
   become a scalability problem, and SPDY reduces this load.

   The use of multiple connections is not without benefit, however.
   Because SPDY multiplexes multiple, independent streams onto a single
   stream, it creates a potential for head-of-line blocking problems at
   the transport level.  In tests so far, the negative effects of head-
   of-line blocking (especially in the presence of packet loss) is
   outweighed by the benefits of compression and prioritization.

5.4.  Fixed vs Variable Length Fields

   SPDY favors use of fixed length 32bit fields in cases where smaller,
   variable length encodings could have been used.  To some, this seems
   like a tragic waste of bandwidth.  SPDY choses the simple encoding
   for speed and simplicity.

   The goal of SPDY is to reduce latency on the network.  The overhead
   of SPDY frames is generally quite low.  Each data frame is only an 8
   byte overhead for a 1452 byte payload (~0.6%).  At the time of this
   writing, bandwidth is already plentiful, and there is a strong trend
   indicating that bandwidth will continue to increase.  With an average
   worldwide bandwidth of 1Mbps, and assuming that a variable length
   encoding could reduce the overhead by 50%, the latency saved by using
   a variable length encoding would be less than 100 nanoseconds.  More
   interesting are the effects when the larger encodings force a packet
   boundary, in which case a round-trip could be induced.  However, by
   addressing other aspects of SPDY and TCP interactions, we believe
   this is completely mitigated.

5.5.  Compression Context(s)

   When isolating the compression contexts used for communicating with
   multiple origins, we had a few choices to make.  We could have
   maintained a map (or list) of compression contexts usable for each
   origin.  The basic case is easy - each HEADERS frame would need to
   identify the context to use for that frame.  However, compression
   contexts are not cheap, so the lifecycle of each context would need
   to be bounded.  For proxy servers, where we could churn through many
   contexts, this would be a concern.  We considered using a static set
   of contexts, say 16 of them, which would bound the memory use.  We
   also considered dynamic contexts, which could be created on the fly,
   and would need to be subsequently destroyed.  All of these are
   complicated, and ultimately we decided that such a mechanism creates
   too many problems to solve.

   Alternatively, we've chosen the simple approach, which is to simply
   provide a flag for resetting the compression context.  For the common



Belshe & Peon           Expires February 2, 2013               [Page 49]

Internet-Draft                    SPDY                       August 2012


   case (no proxy), this fine because most requests are to the same
   origin and we never need to reset the context.  For cases where we
   are using two different origins over a single SPDY session, we simply
   reset the compression state between each transition.

5.6.  Unidirectional streams

   Besides providing a clear endpoint for unidirectional streams,
   Associated-To-Stream-ID also avoids the recipient of pushed streams
   from needing to send a set of empty frames (e.g. the SYN_STREAM w/
   FLAG_FIN) to signal that it doesn't wish to send data on the stream.

5.7.  Data Compression

   Generic compression of data portion of the streams (as opposed to
   compression of the headers) without knowing the content of the stream
   is redundant.  There is no value in compressing a stream which is
   already compressed.  Because of this, SPDY initially allowed data
   compression to be optional.  We included it because study of existing
   websites shows that many sites are not using compression as they
   should, and users suffer because of it.  We wanted a mechanism where,
   at the SPDY layer, site administrators could simply force compression
   - it is better to compress twice than to not compress.

   Overall, however, with this feature being optional and sometimes
   redundant, it was unclear if it was useful at all.  We removed it
   from the specification.

5.8.  Server Push

   A subtle but important point is that server push streams must be
   declared before the associated stream is closed.  The reason for this
   is so that proxies have a lifetime for which they can discard
   information about previous streams.  If a pushed stream could
   associate itself with an already-closed stream, then endpoints would
   not have a specific lifecycle for when they could disavow knowledge
   of the streams which went before.














Belshe & Peon           Expires February 2, 2013               [Page 50]

Internet-Draft                    SPDY                       August 2012


6.  Security Considerations

6.1.  Use of Same-origin constraints

   This specification uses the same-origin policy [RFC6454] in all cases
   where verification of content is required.

6.2.  HTTP Headers and SPDY Headers

   At the application level, HTTP uses name/value pairs in its headers.
   Because SPDY merges the existing HTTP headers with SPDY headers,
   there is a possibility that some HTTP applications already use a
   particular header name.  To avoid any conflicts, all headers
   introduced for layering HTTP over SPDY are prefixed with ":". ":" is
   not a valid sequence in HTTP header naming, preventing any possible
   conflict.

6.3.  Cross-Protocol Attacks

   By utilizing TLS, we believe that SPDY introduces no new cross-
   protocol attacks.  TLS encrypts the contents of all transmission
   (except the handshake itself), making it difficult for attackers to
   control the data which could be used in a cross-protocol attack.

6.4.  Server Push Implicit Headers

   Pushed resources do not have an associated request.  In order for
   existing HTTP cache control validations (such as the Vary header) to
   work, however, all cached resources must have a set of request
   headers.  For this reason, browsers MUST be careful to inherit
   request headers from the associated stream for the push.  This
   includes the 'Cookie' header.



















Belshe & Peon           Expires February 2, 2013               [Page 51]

Internet-Draft                    SPDY                       August 2012


7.  Privacy Considerations

7.1.  Long Lived Connections

   SPDY aims to keep connections open longer between clients and servers
   in order to reduce the latency when a user makes a request.  The
   maintenance of these connections over time could be used to expose
   private information.  For example, a user using a browser hours after
   the previous user stopped using that browser may be able to learn
   about what the previous user was doing.  This is a problem with HTTP
   in its current form as well, however the short lived connections make
   it less of a risk.

7.2.  SETTINGS frame

   The SPDY SETTINGS frame allows servers to store out-of-band
   transmitted information about the communication between client and
   server on the client.  Although this is intended only to be used to
   reduce latency, renegade servers could use it as a mechanism to store
   identifying information about the client in future requests.

   Clients implementing privacy modes, such as Google Chrome's
   "incognito mode", may wish to disable client-persisted SETTINGS
   storage.

   Clients MUST clear persisted SETTINGS information when clearing the
   cookies.

   TODO: Put range maximums on each type of setting to limit
   inappropriate uses.





















Belshe & Peon           Expires February 2, 2013               [Page 52]

Internet-Draft                    SPDY                       August 2012


8.  Sub-protocol negotiation

8.1.  Supporting scheme negotiation using SETTINGS frame

   By default, a client can send SYN_STREAM frames on http and https
   schemes, but if it want to send them on other schemes, it MUST wait
   for a server sending SETTINGS frame which specify declaring schemes.
   Thus, a server SHOULD send a SETTINGS frame as soon as possible
   whether it supports other schemes or not.










































Belshe & Peon           Expires February 2, 2013               [Page 53]

Internet-Draft                    SPDY                       August 2012


9.  Incompatibilities with SPDY draft #3

   Here is a list of the major changes between this draft #3 and this
   draft

      DONE: Different, more precise, notation style used to describe all
      frames.

      DONE: Downsizing various fields in all messages... this will
      definitely need debate

      DONE: Removal of Version field from all messages.

      DONE: Reordered fields in all messages.  All messages now share a
      common header of: length, flags, control-bit, 31-bit-payload.  All
      control frames include an 8th byte, which is the opcode.

      DONE: Addition of end-of-message delimiter flag in data frames

      DONE: Modification of server push; addition of PUSH_PROMISE frame
      add a push frame, removed the 'associated-stream-id' field from
      SYN frame

      ONGOING: Significant modifications to how headers are transported.
      This involved changes to all frames incorporating HEADER blocks,
      and changes to the HEADER blocks themselves.

      ONGOING: Different header compression technique which uses less
      CPU for proxies and which should result in competitive compression

      TODO: Addition of end-of-header-section delimiter flag in any
      frame which has a header block

      ONGOING: Definition of cert-data push

      ONGOING: Definition of name-resolution push

      ONGOING: Redefining prioritization

      TODO: Modification of flow-control; allow two-levels of flow
      control so as to allow greater stream concurrency safely

      TODO: Add the 'blocked-on-flow-control' notification.  Experience
      has shown that limits are too easy to get wrong, and this helps to
      self-correct this problem

      TODO: Modification of flow-control; headers-blocks (thus syn-
      stream) gets its own pool of memory, separate from data frames



Belshe & Peon           Expires February 2, 2013               [Page 54]

Internet-Draft                    SPDY                       August 2012


      TODO: Everything after the first header-block-section possibly
      treated as flow-control

      TODO: Session-error status code added for UNRECOGNIZED_SCHEME for
      new streams.  This triggers when the recipient doesn't know how to
      handle a stream of that type.













































Belshe & Peon           Expires February 2, 2013               [Page 55]

Internet-Draft                    SPDY                       August 2012


10.  Requirements Notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].














































Belshe & Peon           Expires February 2, 2013               [Page 56]

Internet-Draft                    SPDY                       August 2012


11.  Acknowledgements

   Many individuals have contributed to the design and evolution of
   SPDY: Adam Langley, Wan-Teh Chang, Jim Morrison, Mark Nottingham,
   Alyssa Wilk, Costin Manolache, William Chan, Vitaliy Lvin, Joe Chan,
   Adam Barth, Ryan Hamilton, Gavin Peters, Kent Alstad, Kevin Lindsay,
   Paul Amer, Fan Yang, Jonathan Leighton, Alex Strom












































Belshe & Peon           Expires February 2, 2013               [Page 57]

Internet-Draft                    SPDY                       August 2012


12.  Normative References

   [RFC0793]  Postel, J., "Transmission Control Protocol", STD 7,
              RFC 793, September 1981.

   [RFC1738]  Berners-Lee, T., Masinter, L., and M. McCahill, "Uniform
              Resource Locators (URL)", RFC 1738, December 1994.

   [RFC1950]  Deutsch, L. and J-L. Gailly, "ZLIB Compressed Data Format
              Specification version 3.3", RFC 1950, May 1996.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2285]  Mandeville, R., "Benchmarking Terminology for LAN
              Switching Devices", RFC 2285, February 1998.

   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616, June 1999.

   [RFC2617]  Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,
              Leach, P., Luotonen, A., and L. Stewart, "HTTP
              Authentication: Basic and Digest Access Authentication",
              RFC 2617, June 1999.

   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, January 2005.

   [RFC4559]  Jaganathan, K., Zhu, L., and J. Brezak, "SPNEGO-based
              Kerberos and NTLM HTTP Authentication in Microsoft
              Windows", RFC 4559, June 2006.

   [RFC4366]  Blake-Wilson, S., Nystrom, M., Hopwood, D., Mikkelsen, J.,
              and T. Wright, "Transport Layer Security (TLS)
              Extensions", RFC 4366, April 2006.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246, August 2008.

   [RFC6454]  Barth, A., "The Web Origin Concept", RFC 6454,
              December 2011.

   [RFC6455]  Fette, I. and A. Melnikov, "The WebSocket Protocol",
              RFC 6455, December 2011.

   [TLSNPN]   Langley, A., "TLS Next Protocol Negotiation",



Belshe & Peon           Expires February 2, 2013               [Page 58]

Internet-Draft                    SPDY                       August 2012


              <http://tools.ietf.org/html/
              draft-agl-tls-nextprotoneg-01>.

   [ASCII]    "US-ASCII. Coded Character Set - 7-Bit American Standard
              Code for Information Interchange. Standard ANSI X3.4-1986,
              ANSI, 1986.".

   [UDELCOMPRESSION]
              Yang, F., Amer, P., and J. Leighton, "A Methodology to
              Derive SPDY's Initial Dictionary for Zlib Compression",
              <http://www.eecis.udel.edu/~amer/PEL/poc/pdf/
              SPDY-Fan.pdf>.

   [WEBSOCKETAPI]
              Hickson, I., "The WebSocket API",
              <http://www.w3.org/TR/websockets/>.



































Belshe & Peon           Expires February 2, 2013               [Page 59]

Internet-Draft                    SPDY                       August 2012


Appendix A.  Changes

   To be removed by RFC Editor before publication
















































Belshe & Peon           Expires February 2, 2013               [Page 60]

Internet-Draft                    SPDY                       August 2012


Authors' Addresses

   Mike Belshe
   Twist

   Email: mbelshe@chromium.org


   Roberto Peon
   Google, Inc

   Email: fenix@google.com







































Belshe & Peon           Expires February 2, 2013               [Page 61]

